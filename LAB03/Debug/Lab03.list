
Lab03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003118  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003224  08003224  00013224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003248  08003248  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08003248  08003248  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003248  08003248  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003248  08003248  00013248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800324c  0800324c  0001324c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003250  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000006c  080032bc  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  080032bc  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a371  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c92  00000000  00000000  0002a406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  0002c098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f8  00000000  00000000  0002cbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017013  00000000  00000000  0002d5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c677  00000000  00000000  000445bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082526  00000000  00000000  00050c32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3158  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b64  00000000  00000000  000d31ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800320c 	.word	0x0800320c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	0800320c 	.word	0x0800320c

0800014c <isButtonPressed>:
int BUTTON[3]= {BUT1, BUT2, BUT3};
int TimeOutForKeyPress[NUM_BUTTON] = {500, 500, 500};
int button_long_pressed[NUM_BUTTON] = {0, 0, 0};
int button_flag[NUM_BUTTON] = {0, 0, 0};

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000088 	.word	0x20000088

08000180 <subKeyProcess>:
		return 1;
	}
	return 0;
}

void subKeyProcess(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]

	button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000088 	.word	0x20000088

080001a0 <getKeyInput>:

void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUTTON; i++) {
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e073      	b.n	8000294 <getKeyInput+0xf4>
		KeyReg2[i] = KeyReg1[i];
 80001ac:	4a3d      	ldr	r2, [pc, #244]	; (80002a4 <getKeyInput+0x104>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	493c      	ldr	r1, [pc, #240]	; (80002a8 <getKeyInput+0x108>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 80001bc:	4a3b      	ldr	r2, [pc, #236]	; (80002ac <getKeyInput+0x10c>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4937      	ldr	r1, [pc, #220]	; (80002a4 <getKeyInput+0x104>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, BUTTON[i]);
 80001cc:	4a38      	ldr	r2, [pc, #224]	; (80002b0 <getKeyInput+0x110>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001d4:	b29b      	uxth	r3, r3
 80001d6:	4619      	mov	r1, r3
 80001d8:	4836      	ldr	r0, [pc, #216]	; (80002b4 <getKeyInput+0x114>)
 80001da:	f001 ffeb 	bl	80021b4 <HAL_GPIO_ReadPin>
 80001de:	4603      	mov	r3, r0
 80001e0:	4619      	mov	r1, r3
 80001e2:	4a32      	ldr	r2, [pc, #200]	; (80002ac <getKeyInput+0x10c>)
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])) {
 80001ea:	4a2e      	ldr	r2, [pc, #184]	; (80002a4 <getKeyInput+0x104>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f2:	492e      	ldr	r1, [pc, #184]	; (80002ac <getKeyInput+0x10c>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d147      	bne.n	800028e <getKeyInput+0xee>
 80001fe:	4a29      	ldr	r2, [pc, #164]	; (80002a4 <getKeyInput+0x104>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000206:	4928      	ldr	r1, [pc, #160]	; (80002a8 <getKeyInput+0x108>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800020e:	429a      	cmp	r2, r3
 8000210:	d13d      	bne.n	800028e <getKeyInput+0xee>
			if (KeyReg2[i] != KeyReg3[i]) {
 8000212:	4a25      	ldr	r2, [pc, #148]	; (80002a8 <getKeyInput+0x108>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021a:	4927      	ldr	r1, [pc, #156]	; (80002b8 <getKeyInput+0x118>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000222:	429a      	cmp	r2, r3
 8000224:	d016      	beq.n	8000254 <getKeyInput+0xb4>
				KeyReg3[i] = KeyReg2[i];
 8000226:	4a20      	ldr	r2, [pc, #128]	; (80002a8 <getKeyInput+0x108>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022e:	4922      	ldr	r1, [pc, #136]	; (80002b8 <getKeyInput+0x118>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg3[i] == PRESSED_STATE) {
 8000236:	4a20      	ldr	r2, [pc, #128]	; (80002b8 <getKeyInput+0x118>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d125      	bne.n	800028e <getKeyInput+0xee>
					TimeOutForKeyPress[i] = 200;
 8000242:	4a1e      	ldr	r2, [pc, #120]	; (80002bc <getKeyInput+0x11c>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	21c8      	movs	r1, #200	; 0xc8
 8000248:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 800024c:	6878      	ldr	r0, [r7, #4]
 800024e:	f7ff ff97 	bl	8000180 <subKeyProcess>
 8000252:	e01c      	b.n	800028e <getKeyInput+0xee>
				}

			} else {
				TimeOutForKeyPress[i]--;
 8000254:	4a19      	ldr	r2, [pc, #100]	; (80002bc <getKeyInput+0x11c>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800025c:	1e5a      	subs	r2, r3, #1
 800025e:	4917      	ldr	r1, [pc, #92]	; (80002bc <getKeyInput+0x11c>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0) {
 8000266:	4a15      	ldr	r2, [pc, #84]	; (80002bc <getKeyInput+0x11c>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d10d      	bne.n	800028e <getKeyInput+0xee>
					TimeOutForKeyPress[i] = 200;
 8000272:	4a12      	ldr	r2, [pc, #72]	; (80002bc <getKeyInput+0x11c>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	21c8      	movs	r1, #200	; 0xc8
 8000278:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if (KeyReg3[i] == PRESSED_STATE) {
 800027c:	4a0e      	ldr	r2, [pc, #56]	; (80002b8 <getKeyInput+0x118>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d102      	bne.n	800028e <getKeyInput+0xee>
						subKeyProcess(i);
 8000288:	6878      	ldr	r0, [r7, #4]
 800028a:	f7ff ff79 	bl	8000180 <subKeyProcess>
	for (int i = 0; i < NUM_BUTTON; i++) {
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	3301      	adds	r3, #1
 8000292:	607b      	str	r3, [r7, #4]
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2b02      	cmp	r3, #2
 8000298:	dd88      	ble.n	80001ac <getKeyInput+0xc>
					}
				}
			}
		}
	}
}
 800029a:	bf00      	nop
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	2000000c 	.word	0x2000000c
 80002a8:	20000018 	.word	0x20000018
 80002ac:	20000000 	.word	0x20000000
 80002b0:	20000030 	.word	0x20000030
 80002b4:	40010800 	.word	0x40010800
 80002b8:	20000024 	.word	0x20000024
 80002bc:	2000003c 	.word	0x2000003c

080002c0 <fsm_automatic>:


#include "fsm_automatic.h"

void fsm_automatic()
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	switch (status){
 80002c4:	4b59      	ldr	r3, [pc, #356]	; (800042c <fsm_automatic+0x16c>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	3b06      	subs	r3, #6
 80002ca:	2b07      	cmp	r3, #7
 80002cc:	f200 80a2 	bhi.w	8000414 <fsm_automatic+0x154>
 80002d0:	a201      	add	r2, pc, #4	; (adr r2, 80002d8 <fsm_automatic+0x18>)
 80002d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d6:	bf00      	nop
 80002d8:	08000325 	.word	0x08000325
 80002dc:	08000361 	.word	0x08000361
 80002e0:	0800039d 	.word	0x0800039d
 80002e4:	080003d9 	.word	0x080003d9
 80002e8:	08000415 	.word	0x08000415
 80002ec:	08000415 	.word	0x08000415
 80002f0:	08000415 	.word	0x08000415
 80002f4:	080002f9 	.word	0x080002f9
	case MOD_INIT:
		status = RED_GREEN;
 80002f8:	4b4c      	ldr	r3, [pc, #304]	; (800042c <fsm_automatic+0x16c>)
 80002fa:	2206      	movs	r2, #6
 80002fc:	601a      	str	r2, [r3, #0]
		setTimer6(TIME_RED*1000);
 80002fe:	4b4c      	ldr	r3, [pc, #304]	; (8000430 <fsm_automatic+0x170>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000306:	fb02 f303 	mul.w	r3, r2, r3
 800030a:	4618      	mov	r0, r3
 800030c:	f001 f9b2 	bl	8001674 <setTimer6>
		setTimer2(TIME_GREEN*1000);
 8000310:	4b48      	ldr	r3, [pc, #288]	; (8000434 <fsm_automatic+0x174>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000318:	fb02 f303 	mul.w	r3, r2, r3
 800031c:	4618      	mov	r0, r3
 800031e:	f001 f95b 	bl	80015d8 <setTimer2>
		break;
 8000322:	e080      	b.n	8000426 <fsm_automatic+0x166>
	case RED_GREEN:
		display7SEG();
 8000324:	f001 f814 	bl	8001350 <display7SEG>
		setRedAGreenB();
 8000328:	f001 fba4 	bl	8001a74 <setRedAGreenB>
		if(timer_flag2 == 1){
 800032c:	4b42      	ldr	r3, [pc, #264]	; (8000438 <fsm_automatic+0x178>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	2b01      	cmp	r3, #1
 8000332:	d171      	bne.n	8000418 <fsm_automatic+0x158>
			status = RED_YELLOW;
 8000334:	4b3d      	ldr	r3, [pc, #244]	; (800042c <fsm_automatic+0x16c>)
 8000336:	2207      	movs	r2, #7
 8000338:	601a      	str	r2, [r3, #0]
			setTimer6(TIME_RED*1000);
 800033a:	4b3d      	ldr	r3, [pc, #244]	; (8000430 <fsm_automatic+0x170>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000342:	fb02 f303 	mul.w	r3, r2, r3
 8000346:	4618      	mov	r0, r3
 8000348:	f001 f994 	bl	8001674 <setTimer6>
			setTimer2(TIME_YELLOW*1000);
 800034c:	4b3b      	ldr	r3, [pc, #236]	; (800043c <fsm_automatic+0x17c>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000354:	fb02 f303 	mul.w	r3, r2, r3
 8000358:	4618      	mov	r0, r3
 800035a:	f001 f93d 	bl	80015d8 <setTimer2>
		}
		break;
 800035e:	e05b      	b.n	8000418 <fsm_automatic+0x158>
	case RED_YELLOW:
		display7SEG();
 8000360:	f000 fff6 	bl	8001350 <display7SEG>
		setRedAYellowB();
 8000364:	f001 fbaa 	bl	8001abc <setRedAYellowB>
		if(timer_flag2 == 1){
 8000368:	4b33      	ldr	r3, [pc, #204]	; (8000438 <fsm_automatic+0x178>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2b01      	cmp	r3, #1
 800036e:	d155      	bne.n	800041c <fsm_automatic+0x15c>
			status = GREEN_RED;
 8000370:	4b2e      	ldr	r3, [pc, #184]	; (800042c <fsm_automatic+0x16c>)
 8000372:	2208      	movs	r2, #8
 8000374:	601a      	str	r2, [r3, #0]
			setTimer6(TIME_RED*1000);
 8000376:	4b2e      	ldr	r3, [pc, #184]	; (8000430 <fsm_automatic+0x170>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800037e:	fb02 f303 	mul.w	r3, r2, r3
 8000382:	4618      	mov	r0, r3
 8000384:	f001 f976 	bl	8001674 <setTimer6>
			setTimer2(TIME_GREEN*1000);
 8000388:	4b2a      	ldr	r3, [pc, #168]	; (8000434 <fsm_automatic+0x174>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000390:	fb02 f303 	mul.w	r3, r2, r3
 8000394:	4618      	mov	r0, r3
 8000396:	f001 f91f 	bl	80015d8 <setTimer2>
		}
		break;
 800039a:	e03f      	b.n	800041c <fsm_automatic+0x15c>
	case GREEN_RED:
		display7SEG();
 800039c:	f000 ffd8 	bl	8001350 <display7SEG>
		setGreenARedB();
 80003a0:	f001 fbb0 	bl	8001b04 <setGreenARedB>
		if(timer_flag2 ==1){
 80003a4:	4b24      	ldr	r3, [pc, #144]	; (8000438 <fsm_automatic+0x178>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2b01      	cmp	r3, #1
 80003aa:	d139      	bne.n	8000420 <fsm_automatic+0x160>
			status = YELLOW_RED;
 80003ac:	4b1f      	ldr	r3, [pc, #124]	; (800042c <fsm_automatic+0x16c>)
 80003ae:	2209      	movs	r2, #9
 80003b0:	601a      	str	r2, [r3, #0]
			setTimer6(TIME_RED*1000);
 80003b2:	4b1f      	ldr	r3, [pc, #124]	; (8000430 <fsm_automatic+0x170>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003ba:	fb02 f303 	mul.w	r3, r2, r3
 80003be:	4618      	mov	r0, r3
 80003c0:	f001 f958 	bl	8001674 <setTimer6>
			setTimer2(TIME_YELLOW*1000);
 80003c4:	4b1d      	ldr	r3, [pc, #116]	; (800043c <fsm_automatic+0x17c>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003cc:	fb02 f303 	mul.w	r3, r2, r3
 80003d0:	4618      	mov	r0, r3
 80003d2:	f001 f901 	bl	80015d8 <setTimer2>
		}
		break;
 80003d6:	e023      	b.n	8000420 <fsm_automatic+0x160>
	case YELLOW_RED:
		display7SEG();
 80003d8:	f000 ffba 	bl	8001350 <display7SEG>
		setYellowARedB();
 80003dc:	f001 fbb6 	bl	8001b4c <setYellowARedB>
		if(timer_flag2 == 1){
 80003e0:	4b15      	ldr	r3, [pc, #84]	; (8000438 <fsm_automatic+0x178>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d11d      	bne.n	8000424 <fsm_automatic+0x164>
			status = RED_GREEN;
 80003e8:	4b10      	ldr	r3, [pc, #64]	; (800042c <fsm_automatic+0x16c>)
 80003ea:	2206      	movs	r2, #6
 80003ec:	601a      	str	r2, [r3, #0]
			setTimer6(TIME_RED*1000);
 80003ee:	4b10      	ldr	r3, [pc, #64]	; (8000430 <fsm_automatic+0x170>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003f6:	fb02 f303 	mul.w	r3, r2, r3
 80003fa:	4618      	mov	r0, r3
 80003fc:	f001 f93a 	bl	8001674 <setTimer6>
			setTimer2(TIME_GREEN*1000);
 8000400:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <fsm_automatic+0x174>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000408:	fb02 f303 	mul.w	r3, r2, r3
 800040c:	4618      	mov	r0, r3
 800040e:	f001 f8e3 	bl	80015d8 <setTimer2>
		}
		break;
 8000412:	e007      	b.n	8000424 <fsm_automatic+0x164>
	default:
		break;
 8000414:	bf00      	nop
 8000416:	e006      	b.n	8000426 <fsm_automatic+0x166>
		break;
 8000418:	bf00      	nop
 800041a:	e004      	b.n	8000426 <fsm_automatic+0x166>
		break;
 800041c:	bf00      	nop
 800041e:	e002      	b.n	8000426 <fsm_automatic+0x166>
		break;
 8000420:	bf00      	nop
 8000422:	e000      	b.n	8000426 <fsm_automatic+0x166>
		break;
 8000424:	bf00      	nop

	}
}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	20000048 	.word	0x20000048
 8000430:	20000050 	.word	0x20000050
 8000434:	20000058 	.word	0x20000058
 8000438:	200000c8 	.word	0x200000c8
 800043c:	20000054 	.word	0x20000054

08000440 <modifyMode>:
 *  Created on: 29 Oct 2024
 *      Author: HOANG ANH
 */
#include "fsm_manual.h"

void modifyMode(int temp){
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	switch(num){
 8000448:	4b35      	ldr	r3, [pc, #212]	; (8000520 <modifyMode+0xe0>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	2b02      	cmp	r3, #2
 800044e:	d030      	beq.n	80004b2 <modifyMode+0x72>
 8000450:	2b02      	cmp	r3, #2
 8000452:	dc5b      	bgt.n	800050c <modifyMode+0xcc>
 8000454:	2b00      	cmp	r3, #0
 8000456:	d002      	beq.n	800045e <modifyMode+0x1e>
 8000458:	2b01      	cmp	r3, #1
 800045a:	d007      	beq.n	800046c <modifyMode+0x2c>
			setTimer4(250);
			num = 1;
		}
		break;
	default:
		break;
 800045c:	e056      	b.n	800050c <modifyMode+0xcc>
		num = 1;
 800045e:	4b30      	ldr	r3, [pc, #192]	; (8000520 <modifyMode+0xe0>)
 8000460:	2201      	movs	r2, #1
 8000462:	601a      	str	r2, [r3, #0]
		setTimer4(250);
 8000464:	20fa      	movs	r0, #250	; 0xfa
 8000466:	f001 f8eb 	bl	8001640 <setTimer4>
		break;
 800046a:	e054      	b.n	8000516 <modifyMode+0xd6>
		update7SEG(0);
 800046c:	2000      	movs	r0, #0
 800046e:	f000 fccb 	bl	8000e08 <update7SEG>
    	display7SEG_horizontal(mode/10);
 8000472:	4b2c      	ldr	r3, [pc, #176]	; (8000524 <modifyMode+0xe4>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a2c      	ldr	r2, [pc, #176]	; (8000528 <modifyMode+0xe8>)
 8000478:	fb82 1203 	smull	r1, r2, r2, r3
 800047c:	1092      	asrs	r2, r2, #2
 800047e:	17db      	asrs	r3, r3, #31
 8000480:	1ad3      	subs	r3, r2, r3
 8000482:	4618      	mov	r0, r3
 8000484:	f000 f968 	bl	8000758 <display7SEG_horizontal>
        display7SEG_vertical(temp/10);
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4a27      	ldr	r2, [pc, #156]	; (8000528 <modifyMode+0xe8>)
 800048c:	fb82 1203 	smull	r1, r2, r2, r3
 8000490:	1092      	asrs	r2, r2, #2
 8000492:	17db      	asrs	r3, r3, #31
 8000494:	1ad3      	subs	r3, r2, r3
 8000496:	4618      	mov	r0, r3
 8000498:	f000 faec 	bl	8000a74 <display7SEG_vertical>
		if(timer_flag4 == 1){
 800049c:	4b23      	ldr	r3, [pc, #140]	; (800052c <modifyMode+0xec>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d135      	bne.n	8000510 <modifyMode+0xd0>
			setTimer4(250);
 80004a4:	20fa      	movs	r0, #250	; 0xfa
 80004a6:	f001 f8cb 	bl	8001640 <setTimer4>
			num = 2;
 80004aa:	4b1d      	ldr	r3, [pc, #116]	; (8000520 <modifyMode+0xe0>)
 80004ac:	2202      	movs	r2, #2
 80004ae:	601a      	str	r2, [r3, #0]
		break;
 80004b0:	e02e      	b.n	8000510 <modifyMode+0xd0>
		update7SEG(1);
 80004b2:	2001      	movs	r0, #1
 80004b4:	f000 fca8 	bl	8000e08 <update7SEG>
    	display7SEG_horizontal(mode%10);
 80004b8:	4b1a      	ldr	r3, [pc, #104]	; (8000524 <modifyMode+0xe4>)
 80004ba:	681a      	ldr	r2, [r3, #0]
 80004bc:	4b1a      	ldr	r3, [pc, #104]	; (8000528 <modifyMode+0xe8>)
 80004be:	fb83 1302 	smull	r1, r3, r3, r2
 80004c2:	1099      	asrs	r1, r3, #2
 80004c4:	17d3      	asrs	r3, r2, #31
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	460b      	mov	r3, r1
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	440b      	add	r3, r1
 80004ce:	005b      	lsls	r3, r3, #1
 80004d0:	1ad1      	subs	r1, r2, r3
 80004d2:	4608      	mov	r0, r1
 80004d4:	f000 f940 	bl	8000758 <display7SEG_horizontal>
        display7SEG_vertical(temp%10);
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	4b13      	ldr	r3, [pc, #76]	; (8000528 <modifyMode+0xe8>)
 80004dc:	fb83 1302 	smull	r1, r3, r3, r2
 80004e0:	1099      	asrs	r1, r3, #2
 80004e2:	17d3      	asrs	r3, r2, #31
 80004e4:	1ac9      	subs	r1, r1, r3
 80004e6:	460b      	mov	r3, r1
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	440b      	add	r3, r1
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	1ad1      	subs	r1, r2, r3
 80004f0:	4608      	mov	r0, r1
 80004f2:	f000 fabf 	bl	8000a74 <display7SEG_vertical>
		if(timer_flag4 == 1){
 80004f6:	4b0d      	ldr	r3, [pc, #52]	; (800052c <modifyMode+0xec>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d10a      	bne.n	8000514 <modifyMode+0xd4>
			setTimer4(250);
 80004fe:	20fa      	movs	r0, #250	; 0xfa
 8000500:	f001 f89e 	bl	8001640 <setTimer4>
			num = 1;
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <modifyMode+0xe0>)
 8000506:	2201      	movs	r2, #1
 8000508:	601a      	str	r2, [r3, #0]
		break;
 800050a:	e003      	b.n	8000514 <modifyMode+0xd4>
		break;
 800050c:	bf00      	nop
 800050e:	e002      	b.n	8000516 <modifyMode+0xd6>
		break;
 8000510:	bf00      	nop
 8000512:	e000      	b.n	8000516 <modifyMode+0xd6>
		break;
 8000514:	bf00      	nop

	}
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000098 	.word	0x20000098
 8000524:	2000004c 	.word	0x2000004c
 8000528:	66666667 	.word	0x66666667
 800052c:	200000d8 	.word	0x200000d8

08000530 <fsm_manual>:


void fsm_manual(){
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	  if(timer_flag10 == 1){
 8000534:	4b7d      	ldr	r3, [pc, #500]	; (800072c <fsm_manual+0x1fc>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d105      	bne.n	8000548 <fsm_manual+0x18>
		  toggleLedRed();
 800053c:	f001 fa2a 	bl	8001994 <toggleLedRed>
		  setTimer10(1000);
 8000540:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000544:	f001 f8b0 	bl	80016a8 <setTimer10>
	  }
	switch(mode){
 8000548:	4b79      	ldr	r3, [pc, #484]	; (8000730 <fsm_manual+0x200>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	3b01      	subs	r3, #1
 800054e:	2b03      	cmp	r3, #3
 8000550:	f200 80e0 	bhi.w	8000714 <fsm_manual+0x1e4>
 8000554:	a201      	add	r2, pc, #4	; (adr r2, 800055c <fsm_manual+0x2c>)
 8000556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800055a:	bf00      	nop
 800055c:	0800056d 	.word	0x0800056d
 8000560:	0800058f 	.word	0x0800058f
 8000564:	08000603 	.word	0x08000603
 8000568:	08000675 	.word	0x08000675
		case MOD_AUTO:
			fsm_automatic();
 800056c:	f7ff fea8 	bl	80002c0 <fsm_automatic>
			if(isButtonPressed(0) == 1){
 8000570:	2000      	movs	r0, #0
 8000572:	f7ff fdeb 	bl	800014c <isButtonPressed>
 8000576:	4603      	mov	r3, r0
 8000578:	2b01      	cmp	r3, #1
 800057a:	f040 80cd 	bne.w	8000718 <fsm_manual+0x1e8>
			mode = MOD_RED;
 800057e:	4b6c      	ldr	r3, [pc, #432]	; (8000730 <fsm_manual+0x200>)
 8000580:	2202      	movs	r2, #2
 8000582:	601a      	str	r2, [r3, #0]
			setTimer3(500);
 8000584:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000588:	f001 f840 	bl	800160c <setTimer3>
			}
			break;
 800058c:	e0c4      	b.n	8000718 <fsm_manual+0x1e8>
		case MOD_RED:
			modifyMode(TIME_RED_tmp);
 800058e:	4b69      	ldr	r3, [pc, #420]	; (8000734 <fsm_manual+0x204>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff ff54 	bl	8000440 <modifyMode>
			if(timer_flag3 == 1){
 8000598:	4b67      	ldr	r3, [pc, #412]	; (8000738 <fsm_manual+0x208>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d105      	bne.n	80005ac <fsm_manual+0x7c>
				toggleAllRed();
 80005a0:	f001 fa02 	bl	80019a8 <toggleAllRed>
				setTimer3(500);
 80005a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005a8:	f001 f830 	bl	800160c <setTimer3>
			}

			if(isButtonPressed(0) == 1){
 80005ac:	2000      	movs	r0, #0
 80005ae:	f7ff fdcd 	bl	800014c <isButtonPressed>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d106      	bne.n	80005c6 <fsm_manual+0x96>
				mode = MOD_YELLOW;
 80005b8:	4b5d      	ldr	r3, [pc, #372]	; (8000730 <fsm_manual+0x200>)
 80005ba:	2203      	movs	r2, #3
 80005bc:	601a      	str	r2, [r3, #0]
				setTimer3(500);
 80005be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005c2:	f001 f823 	bl	800160c <setTimer3>
			}

			if(isButtonPressed(1) == 1){
 80005c6:	2001      	movs	r0, #1
 80005c8:	f7ff fdc0 	bl	800014c <isButtonPressed>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d10b      	bne.n	80005ea <fsm_manual+0xba>
				TIME_RED_tmp++;
 80005d2:	4b58      	ldr	r3, [pc, #352]	; (8000734 <fsm_manual+0x204>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	3301      	adds	r3, #1
 80005d8:	4a56      	ldr	r2, [pc, #344]	; (8000734 <fsm_manual+0x204>)
 80005da:	6013      	str	r3, [r2, #0]
				if(TIME_RED_tmp > 99){
 80005dc:	4b55      	ldr	r3, [pc, #340]	; (8000734 <fsm_manual+0x204>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2b63      	cmp	r3, #99	; 0x63
 80005e2:	dd02      	ble.n	80005ea <fsm_manual+0xba>
					TIME_RED_tmp = 1;
 80005e4:	4b53      	ldr	r3, [pc, #332]	; (8000734 <fsm_manual+0x204>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	601a      	str	r2, [r3, #0]
				}
			}

			if(isButtonPressed(2) == 1){
 80005ea:	2002      	movs	r0, #2
 80005ec:	f7ff fdae 	bl	800014c <isButtonPressed>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	f040 8092 	bne.w	800071c <fsm_manual+0x1ec>
				TIME_RED = TIME_RED_tmp;
 80005f8:	4b4e      	ldr	r3, [pc, #312]	; (8000734 <fsm_manual+0x204>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a4f      	ldr	r2, [pc, #316]	; (800073c <fsm_manual+0x20c>)
 80005fe:	6013      	str	r3, [r2, #0]
			}
			break;
 8000600:	e08c      	b.n	800071c <fsm_manual+0x1ec>
		case MOD_YELLOW:
			modifyMode(TIME_YELLOW_tmp);
 8000602:	4b4f      	ldr	r3, [pc, #316]	; (8000740 <fsm_manual+0x210>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff ff1a 	bl	8000440 <modifyMode>
			if(timer_flag3 == 1){
 800060c:	4b4a      	ldr	r3, [pc, #296]	; (8000738 <fsm_manual+0x208>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d105      	bne.n	8000620 <fsm_manual+0xf0>
				toggleAllYellow();
 8000614:	f001 fa0c 	bl	8001a30 <toggleAllYellow>
				setTimer3(500);
 8000618:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800061c:	f000 fff6 	bl	800160c <setTimer3>
			}

			if(isButtonPressed(0) == 1){
 8000620:	2000      	movs	r0, #0
 8000622:	f7ff fd93 	bl	800014c <isButtonPressed>
 8000626:	4603      	mov	r3, r0
 8000628:	2b01      	cmp	r3, #1
 800062a:	d106      	bne.n	800063a <fsm_manual+0x10a>
				mode = MOD_GREEN;
 800062c:	4b40      	ldr	r3, [pc, #256]	; (8000730 <fsm_manual+0x200>)
 800062e:	2204      	movs	r2, #4
 8000630:	601a      	str	r2, [r3, #0]
				setTimer4(500);
 8000632:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000636:	f001 f803 	bl	8001640 <setTimer4>
			}

			if(isButtonPressed(1) == 1){
 800063a:	2001      	movs	r0, #1
 800063c:	f7ff fd86 	bl	800014c <isButtonPressed>
 8000640:	4603      	mov	r3, r0
 8000642:	2b01      	cmp	r3, #1
 8000644:	d10b      	bne.n	800065e <fsm_manual+0x12e>
				TIME_YELLOW_tmp++;
 8000646:	4b3e      	ldr	r3, [pc, #248]	; (8000740 <fsm_manual+0x210>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	3301      	adds	r3, #1
 800064c:	4a3c      	ldr	r2, [pc, #240]	; (8000740 <fsm_manual+0x210>)
 800064e:	6013      	str	r3, [r2, #0]
				if(TIME_YELLOW_tmp > 99){
 8000650:	4b3b      	ldr	r3, [pc, #236]	; (8000740 <fsm_manual+0x210>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b63      	cmp	r3, #99	; 0x63
 8000656:	dd02      	ble.n	800065e <fsm_manual+0x12e>
					TIME_YELLOW_tmp = 1;
 8000658:	4b39      	ldr	r3, [pc, #228]	; (8000740 <fsm_manual+0x210>)
 800065a:	2201      	movs	r2, #1
 800065c:	601a      	str	r2, [r3, #0]
				}
			}

			if(isButtonPressed(2) == 1){
 800065e:	2002      	movs	r0, #2
 8000660:	f7ff fd74 	bl	800014c <isButtonPressed>
 8000664:	4603      	mov	r3, r0
 8000666:	2b01      	cmp	r3, #1
 8000668:	d15a      	bne.n	8000720 <fsm_manual+0x1f0>
				TIME_YELLOW = TIME_YELLOW_tmp;
 800066a:	4b35      	ldr	r3, [pc, #212]	; (8000740 <fsm_manual+0x210>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a35      	ldr	r2, [pc, #212]	; (8000744 <fsm_manual+0x214>)
 8000670:	6013      	str	r3, [r2, #0]
			}
			break;
 8000672:	e055      	b.n	8000720 <fsm_manual+0x1f0>
		case MOD_GREEN:
			modifyMode(TIME_GREEN_tmp);
 8000674:	4b34      	ldr	r3, [pc, #208]	; (8000748 <fsm_manual+0x218>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff fee1 	bl	8000440 <modifyMode>
			if(timer_flag3 == 1){
 800067e:	4b2e      	ldr	r3, [pc, #184]	; (8000738 <fsm_manual+0x208>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d105      	bne.n	8000692 <fsm_manual+0x162>
				toggleAllGreen();
 8000686:	f001 f9b1 	bl	80019ec <toggleAllGreen>
				setTimer3(500);
 800068a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800068e:	f000 ffbd 	bl	800160c <setTimer3>
			}

			if(isButtonPressed(0) == 1){
 8000692:	2000      	movs	r0, #0
 8000694:	f7ff fd5a 	bl	800014c <isButtonPressed>
 8000698:	4603      	mov	r3, r0
 800069a:	2b01      	cmp	r3, #1
 800069c:	d102      	bne.n	80006a4 <fsm_manual+0x174>
				mode = MOD_AUTO;
 800069e:	4b24      	ldr	r3, [pc, #144]	; (8000730 <fsm_manual+0x200>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	601a      	str	r2, [r3, #0]
			}

			if(isButtonPressed(1) == 1){
 80006a4:	2001      	movs	r0, #1
 80006a6:	f7ff fd51 	bl	800014c <isButtonPressed>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d10b      	bne.n	80006c8 <fsm_manual+0x198>
				TIME_GREEN_tmp++;
 80006b0:	4b25      	ldr	r3, [pc, #148]	; (8000748 <fsm_manual+0x218>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	3301      	adds	r3, #1
 80006b6:	4a24      	ldr	r2, [pc, #144]	; (8000748 <fsm_manual+0x218>)
 80006b8:	6013      	str	r3, [r2, #0]
				if(TIME_GREEN_tmp > 99){
 80006ba:	4b23      	ldr	r3, [pc, #140]	; (8000748 <fsm_manual+0x218>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2b63      	cmp	r3, #99	; 0x63
 80006c0:	dd02      	ble.n	80006c8 <fsm_manual+0x198>
					TIME_GREEN_tmp = 1;
 80006c2:	4b21      	ldr	r3, [pc, #132]	; (8000748 <fsm_manual+0x218>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	601a      	str	r2, [r3, #0]
				}
			}

			if(isButtonPressed(2) == 1){
 80006c8:	2002      	movs	r0, #2
 80006ca:	f7ff fd3f 	bl	800014c <isButtonPressed>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d127      	bne.n	8000724 <fsm_manual+0x1f4>
				TIME_GREEN = TIME_GREEN_tmp;
 80006d4:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <fsm_manual+0x218>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a1c      	ldr	r2, [pc, #112]	; (800074c <fsm_manual+0x21c>)
 80006da:	6013      	str	r3, [r2, #0]
				TIME_RED_tmp = TIME_GREEN_tmp + TIME_YELLOW_tmp;
 80006dc:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <fsm_manual+0x218>)
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	4b17      	ldr	r3, [pc, #92]	; (8000740 <fsm_manual+0x210>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4413      	add	r3, r2
 80006e6:	4a13      	ldr	r2, [pc, #76]	; (8000734 <fsm_manual+0x204>)
 80006e8:	6013      	str	r3, [r2, #0]
//				if(TIME_RED_tmp == TIME_GREEN_tmp + TIME_YELLOW_tmp){
					TIME_RED = TIME_RED_tmp;
 80006ea:	4b12      	ldr	r3, [pc, #72]	; (8000734 <fsm_manual+0x204>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a13      	ldr	r2, [pc, #76]	; (800073c <fsm_manual+0x20c>)
 80006f0:	6013      	str	r3, [r2, #0]
					TIME_YELLOW = TIME_YELLOW_tmp;
 80006f2:	4b13      	ldr	r3, [pc, #76]	; (8000740 <fsm_manual+0x210>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a13      	ldr	r2, [pc, #76]	; (8000744 <fsm_manual+0x214>)
 80006f8:	6013      	str	r3, [r2, #0]
					TIME_GREEN = TIME_GREEN_tmp;
 80006fa:	4b13      	ldr	r3, [pc, #76]	; (8000748 <fsm_manual+0x218>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a13      	ldr	r2, [pc, #76]	; (800074c <fsm_manual+0x21c>)
 8000700:	6013      	str	r3, [r2, #0]
//				}
				updateBuffer();
 8000702:	f000 fbc5 	bl	8000e90 <updateBuffer>
				status = MOD_INIT;
 8000706:	4b12      	ldr	r3, [pc, #72]	; (8000750 <fsm_manual+0x220>)
 8000708:	220d      	movs	r2, #13
 800070a:	601a      	str	r2, [r3, #0]
				status_system = 0;
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <fsm_manual+0x224>)
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
			}
			break;
 8000712:	e007      	b.n	8000724 <fsm_manual+0x1f4>

		default:
			break;
 8000714:	bf00      	nop
 8000716:	e006      	b.n	8000726 <fsm_manual+0x1f6>
			break;
 8000718:	bf00      	nop
 800071a:	e004      	b.n	8000726 <fsm_manual+0x1f6>
			break;
 800071c:	bf00      	nop
 800071e:	e002      	b.n	8000726 <fsm_manual+0x1f6>
			break;
 8000720:	bf00      	nop
 8000722:	e000      	b.n	8000726 <fsm_manual+0x1f6>
			break;
 8000724:	bf00      	nop
	}
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000108 	.word	0x20000108
 8000730:	2000004c 	.word	0x2000004c
 8000734:	2000009c 	.word	0x2000009c
 8000738:	200000d0 	.word	0x200000d0
 800073c:	20000050 	.word	0x20000050
 8000740:	200000a0 	.word	0x200000a0
 8000744:	20000054 	.word	0x20000054
 8000748:	200000a4 	.word	0x200000a4
 800074c:	20000058 	.word	0x20000058
 8000750:	20000048 	.word	0x20000048
 8000754:	20000094 	.word	0x20000094

08000758 <display7SEG_horizontal>:
#include "software_timer.h"
#include "fsm_automatic.h"
#include "fsm_setting.h"

void display7SEG_horizontal(int num)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b09      	cmp	r3, #9
 8000764:	f200 8180 	bhi.w	8000a68 <display7SEG_horizontal+0x310>
 8000768:	a201      	add	r2, pc, #4	; (adr r2, 8000770 <display7SEG_horizontal+0x18>)
 800076a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800076e:	bf00      	nop
 8000770:	08000799 	.word	0x08000799
 8000774:	080007e1 	.word	0x080007e1
 8000778:	08000829 	.word	0x08000829
 800077c:	08000871 	.word	0x08000871
 8000780:	080008b9 	.word	0x080008b9
 8000784:	08000901 	.word	0x08000901
 8000788:	08000949 	.word	0x08000949
 800078c:	08000991 	.word	0x08000991
 8000790:	080009d9 	.word	0x080009d9
 8000794:	08000a21 	.word	0x08000a21
	switch(num){
	  case 0:
		  HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	2101      	movs	r1, #1
 800079c:	48b4      	ldr	r0, [pc, #720]	; (8000a70 <display7SEG_horizontal+0x318>)
 800079e:	f001 fd20 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2102      	movs	r1, #2
 80007a6:	48b2      	ldr	r0, [pc, #712]	; (8000a70 <display7SEG_horizontal+0x318>)
 80007a8:	f001 fd1b 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2104      	movs	r1, #4
 80007b0:	48af      	ldr	r0, [pc, #700]	; (8000a70 <display7SEG_horizontal+0x318>)
 80007b2:	f001 fd16 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2108      	movs	r1, #8
 80007ba:	48ad      	ldr	r0, [pc, #692]	; (8000a70 <display7SEG_horizontal+0x318>)
 80007bc:	f001 fd11 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2110      	movs	r1, #16
 80007c4:	48aa      	ldr	r0, [pc, #680]	; (8000a70 <display7SEG_horizontal+0x318>)
 80007c6:	f001 fd0c 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2120      	movs	r1, #32
 80007ce:	48a8      	ldr	r0, [pc, #672]	; (8000a70 <display7SEG_horizontal+0x318>)
 80007d0:	f001 fd07 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	2140      	movs	r1, #64	; 0x40
 80007d8:	48a5      	ldr	r0, [pc, #660]	; (8000a70 <display7SEG_horizontal+0x318>)
 80007da:	f001 fd02 	bl	80021e2 <HAL_GPIO_WritePin>
		  break;
 80007de:	e143      	b.n	8000a68 <display7SEG_horizontal+0x310>
	  case 1:
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2101      	movs	r1, #1
 80007e4:	48a2      	ldr	r0, [pc, #648]	; (8000a70 <display7SEG_horizontal+0x318>)
 80007e6:	f001 fcfc 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2102      	movs	r1, #2
 80007ee:	48a0      	ldr	r0, [pc, #640]	; (8000a70 <display7SEG_horizontal+0x318>)
 80007f0:	f001 fcf7 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2104      	movs	r1, #4
 80007f8:	489d      	ldr	r0, [pc, #628]	; (8000a70 <display7SEG_horizontal+0x318>)
 80007fa:	f001 fcf2 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_SET);
 80007fe:	2201      	movs	r2, #1
 8000800:	2108      	movs	r1, #8
 8000802:	489b      	ldr	r0, [pc, #620]	; (8000a70 <display7SEG_horizontal+0x318>)
 8000804:	f001 fced 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_SET);
 8000808:	2201      	movs	r2, #1
 800080a:	2110      	movs	r1, #16
 800080c:	4898      	ldr	r0, [pc, #608]	; (8000a70 <display7SEG_horizontal+0x318>)
 800080e:	f001 fce8 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_SET);
 8000812:	2201      	movs	r2, #1
 8000814:	2120      	movs	r1, #32
 8000816:	4896      	ldr	r0, [pc, #600]	; (8000a70 <display7SEG_horizontal+0x318>)
 8000818:	f001 fce3 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_SET);
 800081c:	2201      	movs	r2, #1
 800081e:	2140      	movs	r1, #64	; 0x40
 8000820:	4893      	ldr	r0, [pc, #588]	; (8000a70 <display7SEG_horizontal+0x318>)
 8000822:	f001 fcde 	bl	80021e2 <HAL_GPIO_WritePin>
		  break;
 8000826:	e11f      	b.n	8000a68 <display7SEG_horizontal+0x310>
	  case 2:
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	2101      	movs	r1, #1
 800082c:	4890      	ldr	r0, [pc, #576]	; (8000a70 <display7SEG_horizontal+0x318>)
 800082e:	f001 fcd8 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2102      	movs	r1, #2
 8000836:	488e      	ldr	r0, [pc, #568]	; (8000a70 <display7SEG_horizontal+0x318>)
 8000838:	f001 fcd3 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	2104      	movs	r1, #4
 8000840:	488b      	ldr	r0, [pc, #556]	; (8000a70 <display7SEG_horizontal+0x318>)
 8000842:	f001 fcce 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2108      	movs	r1, #8
 800084a:	4889      	ldr	r0, [pc, #548]	; (8000a70 <display7SEG_horizontal+0x318>)
 800084c:	f001 fcc9 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	2110      	movs	r1, #16
 8000854:	4886      	ldr	r0, [pc, #536]	; (8000a70 <display7SEG_horizontal+0x318>)
 8000856:	f001 fcc4 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_SET);
 800085a:	2201      	movs	r2, #1
 800085c:	2120      	movs	r1, #32
 800085e:	4884      	ldr	r0, [pc, #528]	; (8000a70 <display7SEG_horizontal+0x318>)
 8000860:	f001 fcbf 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	2140      	movs	r1, #64	; 0x40
 8000868:	4881      	ldr	r0, [pc, #516]	; (8000a70 <display7SEG_horizontal+0x318>)
 800086a:	f001 fcba 	bl	80021e2 <HAL_GPIO_WritePin>
		  break;
 800086e:	e0fb      	b.n	8000a68 <display7SEG_horizontal+0x310>
	  case 3:
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_RESET);
 8000870:	2200      	movs	r2, #0
 8000872:	2101      	movs	r1, #1
 8000874:	487e      	ldr	r0, [pc, #504]	; (8000a70 <display7SEG_horizontal+0x318>)
 8000876:	f001 fcb4 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2102      	movs	r1, #2
 800087e:	487c      	ldr	r0, [pc, #496]	; (8000a70 <display7SEG_horizontal+0x318>)
 8000880:	f001 fcaf 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	2104      	movs	r1, #4
 8000888:	4879      	ldr	r0, [pc, #484]	; (8000a70 <display7SEG_horizontal+0x318>)
 800088a:	f001 fcaa 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2108      	movs	r1, #8
 8000892:	4877      	ldr	r0, [pc, #476]	; (8000a70 <display7SEG_horizontal+0x318>)
 8000894:	f001 fca5 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_SET);
 8000898:	2201      	movs	r2, #1
 800089a:	2110      	movs	r1, #16
 800089c:	4874      	ldr	r0, [pc, #464]	; (8000a70 <display7SEG_horizontal+0x318>)
 800089e:	f001 fca0 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_SET);
 80008a2:	2201      	movs	r2, #1
 80008a4:	2120      	movs	r1, #32
 80008a6:	4872      	ldr	r0, [pc, #456]	; (8000a70 <display7SEG_horizontal+0x318>)
 80008a8:	f001 fc9b 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2140      	movs	r1, #64	; 0x40
 80008b0:	486f      	ldr	r0, [pc, #444]	; (8000a70 <display7SEG_horizontal+0x318>)
 80008b2:	f001 fc96 	bl	80021e2 <HAL_GPIO_WritePin>
		  break;
 80008b6:	e0d7      	b.n	8000a68 <display7SEG_horizontal+0x310>
	  case 4:
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_SET);
 80008b8:	2201      	movs	r2, #1
 80008ba:	2101      	movs	r1, #1
 80008bc:	486c      	ldr	r0, [pc, #432]	; (8000a70 <display7SEG_horizontal+0x318>)
 80008be:	f001 fc90 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2102      	movs	r1, #2
 80008c6:	486a      	ldr	r0, [pc, #424]	; (8000a70 <display7SEG_horizontal+0x318>)
 80008c8:	f001 fc8b 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2104      	movs	r1, #4
 80008d0:	4867      	ldr	r0, [pc, #412]	; (8000a70 <display7SEG_horizontal+0x318>)
 80008d2:	f001 fc86 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_SET);
 80008d6:	2201      	movs	r2, #1
 80008d8:	2108      	movs	r1, #8
 80008da:	4865      	ldr	r0, [pc, #404]	; (8000a70 <display7SEG_horizontal+0x318>)
 80008dc:	f001 fc81 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_SET);
 80008e0:	2201      	movs	r2, #1
 80008e2:	2110      	movs	r1, #16
 80008e4:	4862      	ldr	r0, [pc, #392]	; (8000a70 <display7SEG_horizontal+0x318>)
 80008e6:	f001 fc7c 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2120      	movs	r1, #32
 80008ee:	4860      	ldr	r0, [pc, #384]	; (8000a70 <display7SEG_horizontal+0x318>)
 80008f0:	f001 fc77 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2140      	movs	r1, #64	; 0x40
 80008f8:	485d      	ldr	r0, [pc, #372]	; (8000a70 <display7SEG_horizontal+0x318>)
 80008fa:	f001 fc72 	bl	80021e2 <HAL_GPIO_WritePin>
		  break;
 80008fe:	e0b3      	b.n	8000a68 <display7SEG_horizontal+0x310>
	  case 5:
		  HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	2101      	movs	r1, #1
 8000904:	485a      	ldr	r0, [pc, #360]	; (8000a70 <display7SEG_horizontal+0x318>)
 8000906:	f001 fc6c 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_SET);
 800090a:	2201      	movs	r2, #1
 800090c:	2102      	movs	r1, #2
 800090e:	4858      	ldr	r0, [pc, #352]	; (8000a70 <display7SEG_horizontal+0x318>)
 8000910:	f001 fc67 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	2104      	movs	r1, #4
 8000918:	4855      	ldr	r0, [pc, #340]	; (8000a70 <display7SEG_horizontal+0x318>)
 800091a:	f001 fc62 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2108      	movs	r1, #8
 8000922:	4853      	ldr	r0, [pc, #332]	; (8000a70 <display7SEG_horizontal+0x318>)
 8000924:	f001 fc5d 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	2110      	movs	r1, #16
 800092c:	4850      	ldr	r0, [pc, #320]	; (8000a70 <display7SEG_horizontal+0x318>)
 800092e:	f001 fc58 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	2120      	movs	r1, #32
 8000936:	484e      	ldr	r0, [pc, #312]	; (8000a70 <display7SEG_horizontal+0x318>)
 8000938:	f001 fc53 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	2140      	movs	r1, #64	; 0x40
 8000940:	484b      	ldr	r0, [pc, #300]	; (8000a70 <display7SEG_horizontal+0x318>)
 8000942:	f001 fc4e 	bl	80021e2 <HAL_GPIO_WritePin>
		  break;
 8000946:	e08f      	b.n	8000a68 <display7SEG_horizontal+0x310>
	  case 6:
		  HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	2101      	movs	r1, #1
 800094c:	4848      	ldr	r0, [pc, #288]	; (8000a70 <display7SEG_horizontal+0x318>)
 800094e:	f001 fc48 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_SET);
 8000952:	2201      	movs	r2, #1
 8000954:	2102      	movs	r1, #2
 8000956:	4846      	ldr	r0, [pc, #280]	; (8000a70 <display7SEG_horizontal+0x318>)
 8000958:	f001 fc43 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	2104      	movs	r1, #4
 8000960:	4843      	ldr	r0, [pc, #268]	; (8000a70 <display7SEG_horizontal+0x318>)
 8000962:	f001 fc3e 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2110      	movs	r1, #16
 800096a:	4841      	ldr	r0, [pc, #260]	; (8000a70 <display7SEG_horizontal+0x318>)
 800096c:	f001 fc39 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	2108      	movs	r1, #8
 8000974:	483e      	ldr	r0, [pc, #248]	; (8000a70 <display7SEG_horizontal+0x318>)
 8000976:	f001 fc34 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2120      	movs	r1, #32
 800097e:	483c      	ldr	r0, [pc, #240]	; (8000a70 <display7SEG_horizontal+0x318>)
 8000980:	f001 fc2f 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	2140      	movs	r1, #64	; 0x40
 8000988:	4839      	ldr	r0, [pc, #228]	; (8000a70 <display7SEG_horizontal+0x318>)
 800098a:	f001 fc2a 	bl	80021e2 <HAL_GPIO_WritePin>
		  break;
 800098e:	e06b      	b.n	8000a68 <display7SEG_horizontal+0x310>
	  case 7:
		  HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	2101      	movs	r1, #1
 8000994:	4836      	ldr	r0, [pc, #216]	; (8000a70 <display7SEG_horizontal+0x318>)
 8000996:	f001 fc24 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	2102      	movs	r1, #2
 800099e:	4834      	ldr	r0, [pc, #208]	; (8000a70 <display7SEG_horizontal+0x318>)
 80009a0:	f001 fc1f 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2104      	movs	r1, #4
 80009a8:	4831      	ldr	r0, [pc, #196]	; (8000a70 <display7SEG_horizontal+0x318>)
 80009aa:	f001 fc1a 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_SET);
 80009ae:	2201      	movs	r2, #1
 80009b0:	2108      	movs	r1, #8
 80009b2:	482f      	ldr	r0, [pc, #188]	; (8000a70 <display7SEG_horizontal+0x318>)
 80009b4:	f001 fc15 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_SET);
 80009b8:	2201      	movs	r2, #1
 80009ba:	2110      	movs	r1, #16
 80009bc:	482c      	ldr	r0, [pc, #176]	; (8000a70 <display7SEG_horizontal+0x318>)
 80009be:	f001 fc10 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	2120      	movs	r1, #32
 80009c6:	482a      	ldr	r0, [pc, #168]	; (8000a70 <display7SEG_horizontal+0x318>)
 80009c8:	f001 fc0b 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2140      	movs	r1, #64	; 0x40
 80009d0:	4827      	ldr	r0, [pc, #156]	; (8000a70 <display7SEG_horizontal+0x318>)
 80009d2:	f001 fc06 	bl	80021e2 <HAL_GPIO_WritePin>
		  break;
 80009d6:	e047      	b.n	8000a68 <display7SEG_horizontal+0x310>
	  case 8:
		  HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	2101      	movs	r1, #1
 80009dc:	4824      	ldr	r0, [pc, #144]	; (8000a70 <display7SEG_horizontal+0x318>)
 80009de:	f001 fc00 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2102      	movs	r1, #2
 80009e6:	4822      	ldr	r0, [pc, #136]	; (8000a70 <display7SEG_horizontal+0x318>)
 80009e8:	f001 fbfb 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2104      	movs	r1, #4
 80009f0:	481f      	ldr	r0, [pc, #124]	; (8000a70 <display7SEG_horizontal+0x318>)
 80009f2:	f001 fbf6 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2108      	movs	r1, #8
 80009fa:	481d      	ldr	r0, [pc, #116]	; (8000a70 <display7SEG_horizontal+0x318>)
 80009fc:	f001 fbf1 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2110      	movs	r1, #16
 8000a04:	481a      	ldr	r0, [pc, #104]	; (8000a70 <display7SEG_horizontal+0x318>)
 8000a06:	f001 fbec 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2120      	movs	r1, #32
 8000a0e:	4818      	ldr	r0, [pc, #96]	; (8000a70 <display7SEG_horizontal+0x318>)
 8000a10:	f001 fbe7 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2140      	movs	r1, #64	; 0x40
 8000a18:	4815      	ldr	r0, [pc, #84]	; (8000a70 <display7SEG_horizontal+0x318>)
 8000a1a:	f001 fbe2 	bl	80021e2 <HAL_GPIO_WritePin>
		  break;
 8000a1e:	e023      	b.n	8000a68 <display7SEG_horizontal+0x310>
	  case 9:
		  HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2101      	movs	r1, #1
 8000a24:	4812      	ldr	r0, [pc, #72]	; (8000a70 <display7SEG_horizontal+0x318>)
 8000a26:	f001 fbdc 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	4810      	ldr	r0, [pc, #64]	; (8000a70 <display7SEG_horizontal+0x318>)
 8000a30:	f001 fbd7 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2104      	movs	r1, #4
 8000a38:	480d      	ldr	r0, [pc, #52]	; (8000a70 <display7SEG_horizontal+0x318>)
 8000a3a:	f001 fbd2 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2108      	movs	r1, #8
 8000a42:	480b      	ldr	r0, [pc, #44]	; (8000a70 <display7SEG_horizontal+0x318>)
 8000a44:	f001 fbcd 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_SET);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2110      	movs	r1, #16
 8000a4c:	4808      	ldr	r0, [pc, #32]	; (8000a70 <display7SEG_horizontal+0x318>)
 8000a4e:	f001 fbc8 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2120      	movs	r1, #32
 8000a56:	4806      	ldr	r0, [pc, #24]	; (8000a70 <display7SEG_horizontal+0x318>)
 8000a58:	f001 fbc3 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2140      	movs	r1, #64	; 0x40
 8000a60:	4803      	ldr	r0, [pc, #12]	; (8000a70 <display7SEG_horizontal+0x318>)
 8000a62:	f001 fbbe 	bl	80021e2 <HAL_GPIO_WritePin>
		  break;
 8000a66:	bf00      	nop

	}
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40010c00 	.word	0x40010c00

08000a74 <display7SEG_vertical>:

void display7SEG_vertical(int num)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2b09      	cmp	r3, #9
 8000a80:	f200 81bc 	bhi.w	8000dfc <display7SEG_vertical+0x388>
 8000a84:	a201      	add	r2, pc, #4	; (adr r2, 8000a8c <display7SEG_vertical+0x18>)
 8000a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a8a:	bf00      	nop
 8000a8c:	08000ab5 	.word	0x08000ab5
 8000a90:	08000b09 	.word	0x08000b09
 8000a94:	08000b5d 	.word	0x08000b5d
 8000a98:	08000bb1 	.word	0x08000bb1
 8000a9c:	08000c05 	.word	0x08000c05
 8000aa0:	08000c59 	.word	0x08000c59
 8000aa4:	08000cad 	.word	0x08000cad
 8000aa8:	08000d01 	.word	0x08000d01
 8000aac:	08000d55 	.word	0x08000d55
 8000ab0:	08000da9 	.word	0x08000da9
	switch(num){
	  case 0:
		  HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2180      	movs	r1, #128	; 0x80
 8000ab8:	48d2      	ldr	r0, [pc, #840]	; (8000e04 <display7SEG_vertical+0x390>)
 8000aba:	f001 fb92 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac4:	48cf      	ldr	r0, [pc, #828]	; (8000e04 <display7SEG_vertical+0x390>)
 8000ac6:	f001 fb8c 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ad0:	48cc      	ldr	r0, [pc, #816]	; (8000e04 <display7SEG_vertical+0x390>)
 8000ad2:	f001 fb86 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000adc:	48c9      	ldr	r0, [pc, #804]	; (8000e04 <display7SEG_vertical+0x390>)
 8000ade:	f001 fb80 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ae8:	48c6      	ldr	r0, [pc, #792]	; (8000e04 <display7SEG_vertical+0x390>)
 8000aea:	f001 fb7a 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000af4:	48c3      	ldr	r0, [pc, #780]	; (8000e04 <display7SEG_vertical+0x390>)
 8000af6:	f001 fb74 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_SET);
 8000afa:	2201      	movs	r2, #1
 8000afc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b00:	48c0      	ldr	r0, [pc, #768]	; (8000e04 <display7SEG_vertical+0x390>)
 8000b02:	f001 fb6e 	bl	80021e2 <HAL_GPIO_WritePin>
		  break;
 8000b06:	e179      	b.n	8000dfc <display7SEG_vertical+0x388>
	  case 1:
		  HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2180      	movs	r1, #128	; 0x80
 8000b0c:	48bd      	ldr	r0, [pc, #756]	; (8000e04 <display7SEG_vertical+0x390>)
 8000b0e:	f001 fb68 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b18:	48ba      	ldr	r0, [pc, #744]	; (8000e04 <display7SEG_vertical+0x390>)
 8000b1a:	f001 fb62 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b24:	48b7      	ldr	r0, [pc, #732]	; (8000e04 <display7SEG_vertical+0x390>)
 8000b26:	f001 fb5c 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_SET);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b30:	48b4      	ldr	r0, [pc, #720]	; (8000e04 <display7SEG_vertical+0x390>)
 8000b32:	f001 fb56 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_SET);
 8000b36:	2201      	movs	r2, #1
 8000b38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b3c:	48b1      	ldr	r0, [pc, #708]	; (8000e04 <display7SEG_vertical+0x390>)
 8000b3e:	f001 fb50 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_SET);
 8000b42:	2201      	movs	r2, #1
 8000b44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b48:	48ae      	ldr	r0, [pc, #696]	; (8000e04 <display7SEG_vertical+0x390>)
 8000b4a:	f001 fb4a 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_SET);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b54:	48ab      	ldr	r0, [pc, #684]	; (8000e04 <display7SEG_vertical+0x390>)
 8000b56:	f001 fb44 	bl	80021e2 <HAL_GPIO_WritePin>
		  break;
 8000b5a:	e14f      	b.n	8000dfc <display7SEG_vertical+0x388>
	  case 2:
		  HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2180      	movs	r1, #128	; 0x80
 8000b60:	48a8      	ldr	r0, [pc, #672]	; (8000e04 <display7SEG_vertical+0x390>)
 8000b62:	f001 fb3e 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b6c:	48a5      	ldr	r0, [pc, #660]	; (8000e04 <display7SEG_vertical+0x390>)
 8000b6e:	f001 fb38 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_SET);
 8000b72:	2201      	movs	r2, #1
 8000b74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b78:	48a2      	ldr	r0, [pc, #648]	; (8000e04 <display7SEG_vertical+0x390>)
 8000b7a:	f001 fb32 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b84:	489f      	ldr	r0, [pc, #636]	; (8000e04 <display7SEG_vertical+0x390>)
 8000b86:	f001 fb2c 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b90:	489c      	ldr	r0, [pc, #624]	; (8000e04 <display7SEG_vertical+0x390>)
 8000b92:	f001 fb26 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_SET);
 8000b96:	2201      	movs	r2, #1
 8000b98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b9c:	4899      	ldr	r0, [pc, #612]	; (8000e04 <display7SEG_vertical+0x390>)
 8000b9e:	f001 fb20 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba8:	4896      	ldr	r0, [pc, #600]	; (8000e04 <display7SEG_vertical+0x390>)
 8000baa:	f001 fb1a 	bl	80021e2 <HAL_GPIO_WritePin>
		  break;
 8000bae:	e125      	b.n	8000dfc <display7SEG_vertical+0x388>
	  case 3:
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2180      	movs	r1, #128	; 0x80
 8000bb4:	4893      	ldr	r0, [pc, #588]	; (8000e04 <display7SEG_vertical+0x390>)
 8000bb6:	f001 fb14 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc0:	4890      	ldr	r0, [pc, #576]	; (8000e04 <display7SEG_vertical+0x390>)
 8000bc2:	f001 fb0e 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bcc:	488d      	ldr	r0, [pc, #564]	; (8000e04 <display7SEG_vertical+0x390>)
 8000bce:	f001 fb08 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bd8:	488a      	ldr	r0, [pc, #552]	; (8000e04 <display7SEG_vertical+0x390>)
 8000bda:	f001 fb02 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_SET);
 8000bde:	2201      	movs	r2, #1
 8000be0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000be4:	4887      	ldr	r0, [pc, #540]	; (8000e04 <display7SEG_vertical+0x390>)
 8000be6:	f001 fafc 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_SET);
 8000bea:	2201      	movs	r2, #1
 8000bec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bf0:	4884      	ldr	r0, [pc, #528]	; (8000e04 <display7SEG_vertical+0x390>)
 8000bf2:	f001 faf6 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bfc:	4881      	ldr	r0, [pc, #516]	; (8000e04 <display7SEG_vertical+0x390>)
 8000bfe:	f001 faf0 	bl	80021e2 <HAL_GPIO_WritePin>
		  break;
 8000c02:	e0fb      	b.n	8000dfc <display7SEG_vertical+0x388>
	  case 4:
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_SET);
 8000c04:	2201      	movs	r2, #1
 8000c06:	2180      	movs	r1, #128	; 0x80
 8000c08:	487e      	ldr	r0, [pc, #504]	; (8000e04 <display7SEG_vertical+0x390>)
 8000c0a:	f001 faea 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c14:	487b      	ldr	r0, [pc, #492]	; (8000e04 <display7SEG_vertical+0x390>)
 8000c16:	f001 fae4 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c20:	4878      	ldr	r0, [pc, #480]	; (8000e04 <display7SEG_vertical+0x390>)
 8000c22:	f001 fade 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_SET);
 8000c26:	2201      	movs	r2, #1
 8000c28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c2c:	4875      	ldr	r0, [pc, #468]	; (8000e04 <display7SEG_vertical+0x390>)
 8000c2e:	f001 fad8 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_SET);
 8000c32:	2201      	movs	r2, #1
 8000c34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c38:	4872      	ldr	r0, [pc, #456]	; (8000e04 <display7SEG_vertical+0x390>)
 8000c3a:	f001 fad2 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c44:	486f      	ldr	r0, [pc, #444]	; (8000e04 <display7SEG_vertical+0x390>)
 8000c46:	f001 facc 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c50:	486c      	ldr	r0, [pc, #432]	; (8000e04 <display7SEG_vertical+0x390>)
 8000c52:	f001 fac6 	bl	80021e2 <HAL_GPIO_WritePin>
		  break;
 8000c56:	e0d1      	b.n	8000dfc <display7SEG_vertical+0x388>
	  case 5:
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2180      	movs	r1, #128	; 0x80
 8000c5c:	4869      	ldr	r0, [pc, #420]	; (8000e04 <display7SEG_vertical+0x390>)
 8000c5e:	f001 fac0 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_SET);
 8000c62:	2201      	movs	r2, #1
 8000c64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c68:	4866      	ldr	r0, [pc, #408]	; (8000e04 <display7SEG_vertical+0x390>)
 8000c6a:	f001 faba 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c74:	4863      	ldr	r0, [pc, #396]	; (8000e04 <display7SEG_vertical+0x390>)
 8000c76:	f001 fab4 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c80:	4860      	ldr	r0, [pc, #384]	; (8000e04 <display7SEG_vertical+0x390>)
 8000c82:	f001 faae 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_SET);
 8000c86:	2201      	movs	r2, #1
 8000c88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c8c:	485d      	ldr	r0, [pc, #372]	; (8000e04 <display7SEG_vertical+0x390>)
 8000c8e:	f001 faa8 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c98:	485a      	ldr	r0, [pc, #360]	; (8000e04 <display7SEG_vertical+0x390>)
 8000c9a:	f001 faa2 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca4:	4857      	ldr	r0, [pc, #348]	; (8000e04 <display7SEG_vertical+0x390>)
 8000ca6:	f001 fa9c 	bl	80021e2 <HAL_GPIO_WritePin>
		  break;
 8000caa:	e0a7      	b.n	8000dfc <display7SEG_vertical+0x388>
	  case 6:
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2180      	movs	r1, #128	; 0x80
 8000cb0:	4854      	ldr	r0, [pc, #336]	; (8000e04 <display7SEG_vertical+0x390>)
 8000cb2:	f001 fa96 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_SET);
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cbc:	4851      	ldr	r0, [pc, #324]	; (8000e04 <display7SEG_vertical+0x390>)
 8000cbe:	f001 fa90 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc8:	484e      	ldr	r0, [pc, #312]	; (8000e04 <display7SEG_vertical+0x390>)
 8000cca:	f001 fa8a 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd4:	484b      	ldr	r0, [pc, #300]	; (8000e04 <display7SEG_vertical+0x390>)
 8000cd6:	f001 fa84 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ce0:	4848      	ldr	r0, [pc, #288]	; (8000e04 <display7SEG_vertical+0x390>)
 8000ce2:	f001 fa7e 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cec:	4845      	ldr	r0, [pc, #276]	; (8000e04 <display7SEG_vertical+0x390>)
 8000cee:	f001 fa78 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf8:	4842      	ldr	r0, [pc, #264]	; (8000e04 <display7SEG_vertical+0x390>)
 8000cfa:	f001 fa72 	bl	80021e2 <HAL_GPIO_WritePin>
		  break;
 8000cfe:	e07d      	b.n	8000dfc <display7SEG_vertical+0x388>
	  case 7:
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2180      	movs	r1, #128	; 0x80
 8000d04:	483f      	ldr	r0, [pc, #252]	; (8000e04 <display7SEG_vertical+0x390>)
 8000d06:	f001 fa6c 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d10:	483c      	ldr	r0, [pc, #240]	; (8000e04 <display7SEG_vertical+0x390>)
 8000d12:	f001 fa66 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d1c:	4839      	ldr	r0, [pc, #228]	; (8000e04 <display7SEG_vertical+0x390>)
 8000d1e:	f001 fa60 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d28:	4836      	ldr	r0, [pc, #216]	; (8000e04 <display7SEG_vertical+0x390>)
 8000d2a:	f001 fa5a 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d34:	4833      	ldr	r0, [pc, #204]	; (8000e04 <display7SEG_vertical+0x390>)
 8000d36:	f001 fa54 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_SET);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d40:	4830      	ldr	r0, [pc, #192]	; (8000e04 <display7SEG_vertical+0x390>)
 8000d42:	f001 fa4e 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_SET);
 8000d46:	2201      	movs	r2, #1
 8000d48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d4c:	482d      	ldr	r0, [pc, #180]	; (8000e04 <display7SEG_vertical+0x390>)
 8000d4e:	f001 fa48 	bl	80021e2 <HAL_GPIO_WritePin>
		  break;
 8000d52:	e053      	b.n	8000dfc <display7SEG_vertical+0x388>
	  case 8:
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2180      	movs	r1, #128	; 0x80
 8000d58:	482a      	ldr	r0, [pc, #168]	; (8000e04 <display7SEG_vertical+0x390>)
 8000d5a:	f001 fa42 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d64:	4827      	ldr	r0, [pc, #156]	; (8000e04 <display7SEG_vertical+0x390>)
 8000d66:	f001 fa3c 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d70:	4824      	ldr	r0, [pc, #144]	; (8000e04 <display7SEG_vertical+0x390>)
 8000d72:	f001 fa36 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d7c:	4821      	ldr	r0, [pc, #132]	; (8000e04 <display7SEG_vertical+0x390>)
 8000d7e:	f001 fa30 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d88:	481e      	ldr	r0, [pc, #120]	; (8000e04 <display7SEG_vertical+0x390>)
 8000d8a:	f001 fa2a 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d94:	481b      	ldr	r0, [pc, #108]	; (8000e04 <display7SEG_vertical+0x390>)
 8000d96:	f001 fa24 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000da0:	4818      	ldr	r0, [pc, #96]	; (8000e04 <display7SEG_vertical+0x390>)
 8000da2:	f001 fa1e 	bl	80021e2 <HAL_GPIO_WritePin>
		  break;
 8000da6:	e029      	b.n	8000dfc <display7SEG_vertical+0x388>
	  case 9:
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2180      	movs	r1, #128	; 0x80
 8000dac:	4815      	ldr	r0, [pc, #84]	; (8000e04 <display7SEG_vertical+0x390>)
 8000dae:	f001 fa18 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000db8:	4812      	ldr	r0, [pc, #72]	; (8000e04 <display7SEG_vertical+0x390>)
 8000dba:	f001 fa12 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dc4:	480f      	ldr	r0, [pc, #60]	; (8000e04 <display7SEG_vertical+0x390>)
 8000dc6:	f001 fa0c 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dd0:	480c      	ldr	r0, [pc, #48]	; (8000e04 <display7SEG_vertical+0x390>)
 8000dd2:	f001 fa06 	bl	80021e2 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_SET);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ddc:	4809      	ldr	r0, [pc, #36]	; (8000e04 <display7SEG_vertical+0x390>)
 8000dde:	f001 fa00 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000de8:	4806      	ldr	r0, [pc, #24]	; (8000e04 <display7SEG_vertical+0x390>)
 8000dea:	f001 f9fa 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000df4:	4803      	ldr	r0, [pc, #12]	; (8000e04 <display7SEG_vertical+0x390>)
 8000df6:	f001 f9f4 	bl	80021e2 <HAL_GPIO_WritePin>
		  break;
 8000dfa:	bf00      	nop

	}
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40010c00 	.word	0x40010c00

08000e08 <update7SEG>:

void update7SEG(int indexBuffer){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	switch(indexBuffer){
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <update7SEG+0x16>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d019      	beq.n	8000e50 <update7SEG+0x48>
		HAL_GPIO_WritePin(GPIOA, EN2, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, EN3, GPIO_PIN_RESET);
		break;

	default:
		break;
 8000e1c:	e031      	b.n	8000e82 <update7SEG+0x7a>
		HAL_GPIO_WritePin(GPIOA, EN0, GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e24:	4819      	ldr	r0, [pc, #100]	; (8000e8c <update7SEG+0x84>)
 8000e26:	f001 f9dc 	bl	80021e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN1, GPIO_PIN_SET);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e30:	4816      	ldr	r0, [pc, #88]	; (8000e8c <update7SEG+0x84>)
 8000e32:	f001 f9d6 	bl	80021e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN2, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e3c:	4813      	ldr	r0, [pc, #76]	; (8000e8c <update7SEG+0x84>)
 8000e3e:	f001 f9d0 	bl	80021e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN3, GPIO_PIN_SET);
 8000e42:	2201      	movs	r2, #1
 8000e44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e48:	4810      	ldr	r0, [pc, #64]	; (8000e8c <update7SEG+0x84>)
 8000e4a:	f001 f9ca 	bl	80021e2 <HAL_GPIO_WritePin>
		break;
 8000e4e:	e018      	b.n	8000e82 <update7SEG+0x7a>
		HAL_GPIO_WritePin(GPIOA, EN0, GPIO_PIN_SET);
 8000e50:	2201      	movs	r2, #1
 8000e52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e56:	480d      	ldr	r0, [pc, #52]	; (8000e8c <update7SEG+0x84>)
 8000e58:	f001 f9c3 	bl	80021e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN1, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e62:	480a      	ldr	r0, [pc, #40]	; (8000e8c <update7SEG+0x84>)
 8000e64:	f001 f9bd 	bl	80021e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN2, GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e6e:	4807      	ldr	r0, [pc, #28]	; (8000e8c <update7SEG+0x84>)
 8000e70:	f001 f9b7 	bl	80021e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN3, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e7a:	4804      	ldr	r0, [pc, #16]	; (8000e8c <update7SEG+0x84>)
 8000e7c:	f001 f9b1 	bl	80021e2 <HAL_GPIO_WritePin>
		break;
 8000e80:	bf00      	nop
	}
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40010800 	.word	0x40010800

08000e90 <updateBuffer>:

void updateBuffer()
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
		led_buffer[0] = TIME_RED / 10;
 8000e94:	4b27      	ldr	r3, [pc, #156]	; (8000f34 <updateBuffer+0xa4>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a27      	ldr	r2, [pc, #156]	; (8000f38 <updateBuffer+0xa8>)
 8000e9a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e9e:	1092      	asrs	r2, r2, #2
 8000ea0:	17db      	asrs	r3, r3, #31
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	4a25      	ldr	r2, [pc, #148]	; (8000f3c <updateBuffer+0xac>)
 8000ea6:	6013      	str	r3, [r2, #0]
		led_buffer[1] = TIME_RED % 10;
 8000ea8:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <updateBuffer+0xa4>)
 8000eaa:	6819      	ldr	r1, [r3, #0]
 8000eac:	4b22      	ldr	r3, [pc, #136]	; (8000f38 <updateBuffer+0xa8>)
 8000eae:	fb83 2301 	smull	r2, r3, r3, r1
 8000eb2:	109a      	asrs	r2, r3, #2
 8000eb4:	17cb      	asrs	r3, r1, #31
 8000eb6:	1ad2      	subs	r2, r2, r3
 8000eb8:	4613      	mov	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4413      	add	r3, r2
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	1aca      	subs	r2, r1, r3
 8000ec2:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <updateBuffer+0xac>)
 8000ec4:	605a      	str	r2, [r3, #4]
		led_buffer[2] = TIME_GREEN / 10;
 8000ec6:	4b1e      	ldr	r3, [pc, #120]	; (8000f40 <updateBuffer+0xb0>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a1b      	ldr	r2, [pc, #108]	; (8000f38 <updateBuffer+0xa8>)
 8000ecc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ed0:	1092      	asrs	r2, r2, #2
 8000ed2:	17db      	asrs	r3, r3, #31
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	4a19      	ldr	r2, [pc, #100]	; (8000f3c <updateBuffer+0xac>)
 8000ed8:	6093      	str	r3, [r2, #8]
		led_buffer[3] = TIME_GREEN % 10;
 8000eda:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <updateBuffer+0xb0>)
 8000edc:	6819      	ldr	r1, [r3, #0]
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <updateBuffer+0xa8>)
 8000ee0:	fb83 2301 	smull	r2, r3, r3, r1
 8000ee4:	109a      	asrs	r2, r3, #2
 8000ee6:	17cb      	asrs	r3, r1, #31
 8000ee8:	1ad2      	subs	r2, r2, r3
 8000eea:	4613      	mov	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	4413      	add	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	1aca      	subs	r2, r1, r3
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <updateBuffer+0xac>)
 8000ef6:	60da      	str	r2, [r3, #12]
		led_buffer[4] = TIME_YELLOW / 10;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <updateBuffer+0xb4>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0e      	ldr	r2, [pc, #56]	; (8000f38 <updateBuffer+0xa8>)
 8000efe:	fb82 1203 	smull	r1, r2, r2, r3
 8000f02:	1092      	asrs	r2, r2, #2
 8000f04:	17db      	asrs	r3, r3, #31
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	4a0c      	ldr	r2, [pc, #48]	; (8000f3c <updateBuffer+0xac>)
 8000f0a:	6113      	str	r3, [r2, #16]
		led_buffer[5] = TIME_YELLOW % 10;
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <updateBuffer+0xb4>)
 8000f0e:	6819      	ldr	r1, [r3, #0]
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <updateBuffer+0xa8>)
 8000f12:	fb83 2301 	smull	r2, r3, r3, r1
 8000f16:	109a      	asrs	r2, r3, #2
 8000f18:	17cb      	asrs	r3, r1, #31
 8000f1a:	1ad2      	subs	r2, r2, r3
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4413      	add	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	1aca      	subs	r2, r1, r3
 8000f26:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <updateBuffer+0xac>)
 8000f28:	615a      	str	r2, [r3, #20]
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000050 	.word	0x20000050
 8000f38:	66666667 	.word	0x66666667
 8000f3c:	200000a8 	.word	0x200000a8
 8000f40:	20000058 	.word	0x20000058
 8000f44:	20000054 	.word	0x20000054

08000f48 <countdown7SEG>:


void countdown7SEG() {
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
    int i;
    // Xử lý đếm ngược và đặt lại thời gian
    for (i = 0; i < 6; i += 2) { // Xử lý từng cặp led_buffer (hàng chục và đơn vị)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	e081      	b.n	8001058 <countdown7SEG+0x110>
        if (led_buffer[i + 1] < 0 && led_buffer[i] > 0) {
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3301      	adds	r3, #1
 8000f58:	4a44      	ldr	r2, [pc, #272]	; (800106c <countdown7SEG+0x124>)
 8000f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	da14      	bge.n	8000f8c <countdown7SEG+0x44>
 8000f62:	4a42      	ldr	r2, [pc, #264]	; (800106c <countdown7SEG+0x124>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	dd0e      	ble.n	8000f8c <countdown7SEG+0x44>
            led_buffer[i + 1] = 9;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3301      	adds	r3, #1
 8000f72:	4a3e      	ldr	r2, [pc, #248]	; (800106c <countdown7SEG+0x124>)
 8000f74:	2109      	movs	r1, #9
 8000f76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            led_buffer[i]--;
 8000f7a:	4a3c      	ldr	r2, [pc, #240]	; (800106c <countdown7SEG+0x124>)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f82:	1e5a      	subs	r2, r3, #1
 8000f84:	4939      	ldr	r1, [pc, #228]	; (800106c <countdown7SEG+0x124>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
        if (led_buffer[i] == 0 && led_buffer[i + 1] == 0) {
 8000f8c:	4a37      	ldr	r2, [pc, #220]	; (800106c <countdown7SEG+0x124>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d15c      	bne.n	8001052 <countdown7SEG+0x10a>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	4a33      	ldr	r2, [pc, #204]	; (800106c <countdown7SEG+0x124>)
 8000f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d155      	bne.n	8001052 <countdown7SEG+0x10a>
            if (i == 0) { // Đèn đỏ
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d119      	bne.n	8000fe0 <countdown7SEG+0x98>
                led_buffer[0] = TIME_RED / 10;
 8000fac:	4b30      	ldr	r3, [pc, #192]	; (8001070 <countdown7SEG+0x128>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a30      	ldr	r2, [pc, #192]	; (8001074 <countdown7SEG+0x12c>)
 8000fb2:	fb82 1203 	smull	r1, r2, r2, r3
 8000fb6:	1092      	asrs	r2, r2, #2
 8000fb8:	17db      	asrs	r3, r3, #31
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	4a2b      	ldr	r2, [pc, #172]	; (800106c <countdown7SEG+0x124>)
 8000fbe:	6013      	str	r3, [r2, #0]
                led_buffer[1] = TIME_RED % 10;
 8000fc0:	4b2b      	ldr	r3, [pc, #172]	; (8001070 <countdown7SEG+0x128>)
 8000fc2:	6819      	ldr	r1, [r3, #0]
 8000fc4:	4b2b      	ldr	r3, [pc, #172]	; (8001074 <countdown7SEG+0x12c>)
 8000fc6:	fb83 2301 	smull	r2, r3, r3, r1
 8000fca:	109a      	asrs	r2, r3, #2
 8000fcc:	17cb      	asrs	r3, r1, #31
 8000fce:	1ad2      	subs	r2, r2, r3
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	4413      	add	r3, r2
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	1aca      	subs	r2, r1, r3
 8000fda:	4b24      	ldr	r3, [pc, #144]	; (800106c <countdown7SEG+0x124>)
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	e038      	b.n	8001052 <countdown7SEG+0x10a>
            } else if (i == 2) { // Đèn xanh
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d119      	bne.n	800101a <countdown7SEG+0xd2>
                led_buffer[2] = TIME_GREEN / 10;
 8000fe6:	4b24      	ldr	r3, [pc, #144]	; (8001078 <countdown7SEG+0x130>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a22      	ldr	r2, [pc, #136]	; (8001074 <countdown7SEG+0x12c>)
 8000fec:	fb82 1203 	smull	r1, r2, r2, r3
 8000ff0:	1092      	asrs	r2, r2, #2
 8000ff2:	17db      	asrs	r3, r3, #31
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	4a1d      	ldr	r2, [pc, #116]	; (800106c <countdown7SEG+0x124>)
 8000ff8:	6093      	str	r3, [r2, #8]
                led_buffer[3] = TIME_GREEN % 10;
 8000ffa:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <countdown7SEG+0x130>)
 8000ffc:	6819      	ldr	r1, [r3, #0]
 8000ffe:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <countdown7SEG+0x12c>)
 8001000:	fb83 2301 	smull	r2, r3, r3, r1
 8001004:	109a      	asrs	r2, r3, #2
 8001006:	17cb      	asrs	r3, r1, #31
 8001008:	1ad2      	subs	r2, r2, r3
 800100a:	4613      	mov	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	1aca      	subs	r2, r1, r3
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <countdown7SEG+0x124>)
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	e01b      	b.n	8001052 <countdown7SEG+0x10a>
            } else if (i == 4) { // Đèn vàng
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b04      	cmp	r3, #4
 800101e:	d118      	bne.n	8001052 <countdown7SEG+0x10a>
                led_buffer[4] = TIME_YELLOW / 10;
 8001020:	4b16      	ldr	r3, [pc, #88]	; (800107c <countdown7SEG+0x134>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a13      	ldr	r2, [pc, #76]	; (8001074 <countdown7SEG+0x12c>)
 8001026:	fb82 1203 	smull	r1, r2, r2, r3
 800102a:	1092      	asrs	r2, r2, #2
 800102c:	17db      	asrs	r3, r3, #31
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	4a0e      	ldr	r2, [pc, #56]	; (800106c <countdown7SEG+0x124>)
 8001032:	6113      	str	r3, [r2, #16]
                led_buffer[5] = TIME_YELLOW % 10;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <countdown7SEG+0x134>)
 8001036:	6819      	ldr	r1, [r3, #0]
 8001038:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <countdown7SEG+0x12c>)
 800103a:	fb83 2301 	smull	r2, r3, r3, r1
 800103e:	109a      	asrs	r2, r3, #2
 8001040:	17cb      	asrs	r3, r1, #31
 8001042:	1ad2      	subs	r2, r2, r3
 8001044:	4613      	mov	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4413      	add	r3, r2
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	1aca      	subs	r2, r1, r3
 800104e:	4b07      	ldr	r3, [pc, #28]	; (800106c <countdown7SEG+0x124>)
 8001050:	615a      	str	r2, [r3, #20]
    for (i = 0; i < 6; i += 2) { // Xử lý từng cặp led_buffer (hàng chục và đơn vị)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3302      	adds	r3, #2
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b05      	cmp	r3, #5
 800105c:	f77f af7a 	ble.w	8000f54 <countdown7SEG+0xc>
            }
        }
    }
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr
 800106c:	200000a8 	.word	0x200000a8
 8001070:	20000050 	.word	0x20000050
 8001074:	66666667 	.word	0x66666667
 8001078:	20000058 	.word	0x20000058
 800107c:	20000054 	.word	0x20000054

08001080 <led7SEG_YR>:

void led7SEG_YR() {
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
    switch (status_system) {
 8001084:	4b28      	ldr	r3, [pc, #160]	; (8001128 <led7SEG_YR+0xa8>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b02      	cmp	r3, #2
 800108a:	d029      	beq.n	80010e0 <led7SEG_YR+0x60>
 800108c:	2b02      	cmp	r3, #2
 800108e:	dc49      	bgt.n	8001124 <led7SEG_YR+0xa4>
 8001090:	2b00      	cmp	r3, #0
 8001092:	d002      	beq.n	800109a <led7SEG_YR+0x1a>
 8001094:	2b01      	cmp	r3, #1
 8001096:	d00a      	beq.n	80010ae <led7SEG_YR+0x2e>
                led_buffer[5]--; // Giảm đèn vàng
                status_system = 0;
            }
            break;
    }
}
 8001098:	e044      	b.n	8001124 <led7SEG_YR+0xa4>
        	countdown7SEG();
 800109a:	f7ff ff55 	bl	8000f48 <countdown7SEG>
            setTimer1(500);
 800109e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010a2:	f000 fa7f 	bl	80015a4 <setTimer1>
            status_system = 1;
 80010a6:	4b20      	ldr	r3, [pc, #128]	; (8001128 <led7SEG_YR+0xa8>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	601a      	str	r2, [r3, #0]
            break;
 80010ac:	e03a      	b.n	8001124 <led7SEG_YR+0xa4>
        	update7SEG(0);
 80010ae:	2000      	movs	r0, #0
 80010b0:	f7ff feaa 	bl	8000e08 <update7SEG>
        	display7SEG_horizontal(led_buffer[4]); // Hàng chục đèn vàng
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <led7SEG_YR+0xac>)
 80010b6:	691b      	ldr	r3, [r3, #16]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fb4d 	bl	8000758 <display7SEG_horizontal>
            display7SEG_vertical(led_buffer[0]); // Hàng chục đèn đỏ
 80010be:	4b1b      	ldr	r3, [pc, #108]	; (800112c <led7SEG_YR+0xac>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fcd6 	bl	8000a74 <display7SEG_vertical>
            if (timer_flag1 == 1) {
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <led7SEG_YR+0xb0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d126      	bne.n	800111e <led7SEG_YR+0x9e>
            	status_system = 2;
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <led7SEG_YR+0xa8>)
 80010d2:	2202      	movs	r2, #2
 80010d4:	601a      	str	r2, [r3, #0]
                setTimer1(500);
 80010d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010da:	f000 fa63 	bl	80015a4 <setTimer1>
            break;
 80010de:	e01e      	b.n	800111e <led7SEG_YR+0x9e>
        	update7SEG(1);
 80010e0:	2001      	movs	r0, #1
 80010e2:	f7ff fe91 	bl	8000e08 <update7SEG>
            display7SEG_horizontal(led_buffer[5]); // Hàng đơn vị đèn vàng
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <led7SEG_YR+0xac>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fb34 	bl	8000758 <display7SEG_horizontal>
            display7SEG_vertical(led_buffer[1]); // Hàng đơn vị đèn đỏ
 80010f0:	4b0e      	ldr	r3, [pc, #56]	; (800112c <led7SEG_YR+0xac>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fcbd 	bl	8000a74 <display7SEG_vertical>
            if (timer_flag1 == 1) {
 80010fa:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <led7SEG_YR+0xb0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d10f      	bne.n	8001122 <led7SEG_YR+0xa2>
                led_buffer[1]--; // Giảm đèn đỏ
 8001102:	4b0a      	ldr	r3, [pc, #40]	; (800112c <led7SEG_YR+0xac>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	4a08      	ldr	r2, [pc, #32]	; (800112c <led7SEG_YR+0xac>)
 800110a:	6053      	str	r3, [r2, #4]
                led_buffer[5]--; // Giảm đèn vàng
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <led7SEG_YR+0xac>)
 800110e:	695b      	ldr	r3, [r3, #20]
 8001110:	3b01      	subs	r3, #1
 8001112:	4a06      	ldr	r2, [pc, #24]	; (800112c <led7SEG_YR+0xac>)
 8001114:	6153      	str	r3, [r2, #20]
                status_system = 0;
 8001116:	4b04      	ldr	r3, [pc, #16]	; (8001128 <led7SEG_YR+0xa8>)
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
            break;
 800111c:	e001      	b.n	8001122 <led7SEG_YR+0xa2>
            break;
 800111e:	bf00      	nop
 8001120:	e000      	b.n	8001124 <led7SEG_YR+0xa4>
            break;
 8001122:	bf00      	nop
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000094 	.word	0x20000094
 800112c:	200000a8 	.word	0x200000a8
 8001130:	200000c0 	.word	0x200000c0

08001134 <led7SEG_GR>:


void led7SEG_GR() {
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
    switch (status_system) {
 8001138:	4b28      	ldr	r3, [pc, #160]	; (80011dc <led7SEG_GR+0xa8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b02      	cmp	r3, #2
 800113e:	d029      	beq.n	8001194 <led7SEG_GR+0x60>
 8001140:	2b02      	cmp	r3, #2
 8001142:	dc49      	bgt.n	80011d8 <led7SEG_GR+0xa4>
 8001144:	2b00      	cmp	r3, #0
 8001146:	d002      	beq.n	800114e <led7SEG_GR+0x1a>
 8001148:	2b01      	cmp	r3, #1
 800114a:	d00a      	beq.n	8001162 <led7SEG_GR+0x2e>
                led_buffer[3]--; // Giảm đèn xanh
                status_system = 0;
            }
            break;
    }
}
 800114c:	e044      	b.n	80011d8 <led7SEG_GR+0xa4>
        	countdown7SEG();
 800114e:	f7ff fefb 	bl	8000f48 <countdown7SEG>
            setTimer1(500);
 8001152:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001156:	f000 fa25 	bl	80015a4 <setTimer1>
            status_system = 1;
 800115a:	4b20      	ldr	r3, [pc, #128]	; (80011dc <led7SEG_GR+0xa8>)
 800115c:	2201      	movs	r2, #1
 800115e:	601a      	str	r2, [r3, #0]
            break;
 8001160:	e03a      	b.n	80011d8 <led7SEG_GR+0xa4>
        	update7SEG(0);
 8001162:	2000      	movs	r0, #0
 8001164:	f7ff fe50 	bl	8000e08 <update7SEG>
        	display7SEG_horizontal(led_buffer[2]); // Hàng chục đèn xanh
 8001168:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <led7SEG_GR+0xac>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff faf3 	bl	8000758 <display7SEG_horizontal>
            display7SEG_vertical(led_buffer[0]); // Hàng chục đèn đỏ
 8001172:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <led7SEG_GR+0xac>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fc7c 	bl	8000a74 <display7SEG_vertical>
            if (timer_flag1 == 1) {
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <led7SEG_GR+0xb0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d126      	bne.n	80011d2 <led7SEG_GR+0x9e>
            	status_system = 2;
 8001184:	4b15      	ldr	r3, [pc, #84]	; (80011dc <led7SEG_GR+0xa8>)
 8001186:	2202      	movs	r2, #2
 8001188:	601a      	str	r2, [r3, #0]
                setTimer1(500);
 800118a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800118e:	f000 fa09 	bl	80015a4 <setTimer1>
            break;
 8001192:	e01e      	b.n	80011d2 <led7SEG_GR+0x9e>
        	update7SEG(1);
 8001194:	2001      	movs	r0, #1
 8001196:	f7ff fe37 	bl	8000e08 <update7SEG>
            display7SEG_horizontal(led_buffer[3]); // Hàng đơn vị đèn xanh
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <led7SEG_GR+0xac>)
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff fada 	bl	8000758 <display7SEG_horizontal>
            display7SEG_vertical(led_buffer[1]); // Hàng đơn vị đèn đỏ
 80011a4:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <led7SEG_GR+0xac>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fc63 	bl	8000a74 <display7SEG_vertical>
            if (timer_flag1 == 1) {
 80011ae:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <led7SEG_GR+0xb0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d10f      	bne.n	80011d6 <led7SEG_GR+0xa2>
                led_buffer[1]--; // Giảm đèn đỏ
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <led7SEG_GR+0xac>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	4a08      	ldr	r2, [pc, #32]	; (80011e0 <led7SEG_GR+0xac>)
 80011be:	6053      	str	r3, [r2, #4]
                led_buffer[3]--; // Giảm đèn xanh
 80011c0:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <led7SEG_GR+0xac>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	3b01      	subs	r3, #1
 80011c6:	4a06      	ldr	r2, [pc, #24]	; (80011e0 <led7SEG_GR+0xac>)
 80011c8:	60d3      	str	r3, [r2, #12]
                status_system = 0;
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <led7SEG_GR+0xa8>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
            break;
 80011d0:	e001      	b.n	80011d6 <led7SEG_GR+0xa2>
            break;
 80011d2:	bf00      	nop
 80011d4:	e000      	b.n	80011d8 <led7SEG_GR+0xa4>
            break;
 80011d6:	bf00      	nop
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000094 	.word	0x20000094
 80011e0:	200000a8 	.word	0x200000a8
 80011e4:	200000c0 	.word	0x200000c0

080011e8 <led7SEG_RY>:

void led7SEG_RY() {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
    switch (status_system) {
 80011ec:	4b28      	ldr	r3, [pc, #160]	; (8001290 <led7SEG_RY+0xa8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d029      	beq.n	8001248 <led7SEG_RY+0x60>
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	dc49      	bgt.n	800128c <led7SEG_RY+0xa4>
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d002      	beq.n	8001202 <led7SEG_RY+0x1a>
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d00a      	beq.n	8001216 <led7SEG_RY+0x2e>
                led_buffer[5]--; // Giảm đèn vàng
                status_system = 0;
            }
            break;
    }
}
 8001200:	e044      	b.n	800128c <led7SEG_RY+0xa4>
        	countdown7SEG();
 8001202:	f7ff fea1 	bl	8000f48 <countdown7SEG>
            setTimer1(500);
 8001206:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800120a:	f000 f9cb 	bl	80015a4 <setTimer1>
            status_system = 1;
 800120e:	4b20      	ldr	r3, [pc, #128]	; (8001290 <led7SEG_RY+0xa8>)
 8001210:	2201      	movs	r2, #1
 8001212:	601a      	str	r2, [r3, #0]
            break;
 8001214:	e03a      	b.n	800128c <led7SEG_RY+0xa4>
        	update7SEG(0);
 8001216:	2000      	movs	r0, #0
 8001218:	f7ff fdf6 	bl	8000e08 <update7SEG>
        	display7SEG_horizontal(led_buffer[0]); // Hàng chục đèn đỏ
 800121c:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <led7SEG_RY+0xac>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fa99 	bl	8000758 <display7SEG_horizontal>
            display7SEG_vertical(led_buffer[4]); // Hàng chục đèn vàng
 8001226:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <led7SEG_RY+0xac>)
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fc22 	bl	8000a74 <display7SEG_vertical>
            if (timer_flag1 == 1) {
 8001230:	4b19      	ldr	r3, [pc, #100]	; (8001298 <led7SEG_RY+0xb0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d126      	bne.n	8001286 <led7SEG_RY+0x9e>
            	status_system = 2;
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <led7SEG_RY+0xa8>)
 800123a:	2202      	movs	r2, #2
 800123c:	601a      	str	r2, [r3, #0]
                setTimer1(500);
 800123e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001242:	f000 f9af 	bl	80015a4 <setTimer1>
            break;
 8001246:	e01e      	b.n	8001286 <led7SEG_RY+0x9e>
        	update7SEG(1);
 8001248:	2001      	movs	r0, #1
 800124a:	f7ff fddd 	bl	8000e08 <update7SEG>
            display7SEG_horizontal(led_buffer[1]); // Hàng đơn vị đèn đỏ
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <led7SEG_RY+0xac>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fa80 	bl	8000758 <display7SEG_horizontal>
            display7SEG_vertical(led_buffer[5]); // Hàng đơn vị đèn vàng
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <led7SEG_RY+0xac>)
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fc09 	bl	8000a74 <display7SEG_vertical>
            if (timer_flag1 == 1) {
 8001262:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <led7SEG_RY+0xb0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d10f      	bne.n	800128a <led7SEG_RY+0xa2>
                led_buffer[1]--; // Giảm đèn đỏ
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <led7SEG_RY+0xac>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	3b01      	subs	r3, #1
 8001270:	4a08      	ldr	r2, [pc, #32]	; (8001294 <led7SEG_RY+0xac>)
 8001272:	6053      	str	r3, [r2, #4]
                led_buffer[5]--; // Giảm đèn vàng
 8001274:	4b07      	ldr	r3, [pc, #28]	; (8001294 <led7SEG_RY+0xac>)
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	3b01      	subs	r3, #1
 800127a:	4a06      	ldr	r2, [pc, #24]	; (8001294 <led7SEG_RY+0xac>)
 800127c:	6153      	str	r3, [r2, #20]
                status_system = 0;
 800127e:	4b04      	ldr	r3, [pc, #16]	; (8001290 <led7SEG_RY+0xa8>)
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
            break;
 8001284:	e001      	b.n	800128a <led7SEG_RY+0xa2>
            break;
 8001286:	bf00      	nop
 8001288:	e000      	b.n	800128c <led7SEG_RY+0xa4>
            break;
 800128a:	bf00      	nop
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000094 	.word	0x20000094
 8001294:	200000a8 	.word	0x200000a8
 8001298:	200000c0 	.word	0x200000c0

0800129c <led7SEG_RG>:

void led7SEG_RG() {
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
    switch (status_system) {
 80012a0:	4b28      	ldr	r3, [pc, #160]	; (8001344 <led7SEG_RG+0xa8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d029      	beq.n	80012fc <led7SEG_RG+0x60>
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	dc49      	bgt.n	8001340 <led7SEG_RG+0xa4>
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d002      	beq.n	80012b6 <led7SEG_RG+0x1a>
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d00a      	beq.n	80012ca <led7SEG_RG+0x2e>
                led_buffer[3]--; // Giảm đèn xanh
                status_system = 0;
            }
            break;
    }
}
 80012b4:	e044      	b.n	8001340 <led7SEG_RG+0xa4>
        	countdown7SEG();
 80012b6:	f7ff fe47 	bl	8000f48 <countdown7SEG>
            setTimer1(500);
 80012ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012be:	f000 f971 	bl	80015a4 <setTimer1>
            status_system = 1;
 80012c2:	4b20      	ldr	r3, [pc, #128]	; (8001344 <led7SEG_RG+0xa8>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	601a      	str	r2, [r3, #0]
            break;
 80012c8:	e03a      	b.n	8001340 <led7SEG_RG+0xa4>
        	update7SEG(0);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f7ff fd9c 	bl	8000e08 <update7SEG>
        	display7SEG_horizontal(led_buffer[0]); // Hàng chục đèn xanh
 80012d0:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <led7SEG_RG+0xac>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fa3f 	bl	8000758 <display7SEG_horizontal>
            display7SEG_vertical(led_buffer[2]); // Hàng chục đèn đỏ
 80012da:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <led7SEG_RG+0xac>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fbc8 	bl	8000a74 <display7SEG_vertical>
            if (timer_flag1 == 1) {
 80012e4:	4b19      	ldr	r3, [pc, #100]	; (800134c <led7SEG_RG+0xb0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d126      	bne.n	800133a <led7SEG_RG+0x9e>
            	status_system = 2;
 80012ec:	4b15      	ldr	r3, [pc, #84]	; (8001344 <led7SEG_RG+0xa8>)
 80012ee:	2202      	movs	r2, #2
 80012f0:	601a      	str	r2, [r3, #0]
                setTimer1(500);
 80012f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012f6:	f000 f955 	bl	80015a4 <setTimer1>
            break;
 80012fa:	e01e      	b.n	800133a <led7SEG_RG+0x9e>
        	update7SEG(1);
 80012fc:	2001      	movs	r0, #1
 80012fe:	f7ff fd83 	bl	8000e08 <update7SEG>
            display7SEG_horizontal(led_buffer[1]); // Hàng đơn vị đèn đỏ
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <led7SEG_RG+0xac>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fa26 	bl	8000758 <display7SEG_horizontal>
            display7SEG_vertical(led_buffer[3]); // Hàng đơn vị đèn xanh
 800130c:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <led7SEG_RG+0xac>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fbaf 	bl	8000a74 <display7SEG_vertical>
            if (timer_flag1 == 1) {
 8001316:	4b0d      	ldr	r3, [pc, #52]	; (800134c <led7SEG_RG+0xb0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d10f      	bne.n	800133e <led7SEG_RG+0xa2>
                led_buffer[1]--; // Giảm đèn đỏ
 800131e:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <led7SEG_RG+0xac>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	4a08      	ldr	r2, [pc, #32]	; (8001348 <led7SEG_RG+0xac>)
 8001326:	6053      	str	r3, [r2, #4]
                led_buffer[3]--; // Giảm đèn xanh
 8001328:	4b07      	ldr	r3, [pc, #28]	; (8001348 <led7SEG_RG+0xac>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	3b01      	subs	r3, #1
 800132e:	4a06      	ldr	r2, [pc, #24]	; (8001348 <led7SEG_RG+0xac>)
 8001330:	60d3      	str	r3, [r2, #12]
                status_system = 0;
 8001332:	4b04      	ldr	r3, [pc, #16]	; (8001344 <led7SEG_RG+0xa8>)
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
            break;
 8001338:	e001      	b.n	800133e <led7SEG_RG+0xa2>
            break;
 800133a:	bf00      	nop
 800133c:	e000      	b.n	8001340 <led7SEG_RG+0xa4>
            break;
 800133e:	bf00      	nop
}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000094 	.word	0x20000094
 8001348:	200000a8 	.word	0x200000a8
 800134c:	200000c0 	.word	0x200000c0

08001350 <display7SEG>:

void display7SEG(){
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	switch(status){
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <display7SEG+0x44>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	3b06      	subs	r3, #6
 800135a:	2b03      	cmp	r3, #3
 800135c:	d816      	bhi.n	800138c <display7SEG+0x3c>
 800135e:	a201      	add	r2, pc, #4	; (adr r2, 8001364 <display7SEG+0x14>)
 8001360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001364:	08001375 	.word	0x08001375
 8001368:	0800137b 	.word	0x0800137b
 800136c:	08001381 	.word	0x08001381
 8001370:	08001387 	.word	0x08001387
	case RED_GREEN:
		led7SEG_RG();
 8001374:	f7ff ff92 	bl	800129c <led7SEG_RG>
		break;
 8001378:	e009      	b.n	800138e <display7SEG+0x3e>
	case RED_YELLOW:
		led7SEG_RY();
 800137a:	f7ff ff35 	bl	80011e8 <led7SEG_RY>
		break;
 800137e:	e006      	b.n	800138e <display7SEG+0x3e>
	case GREEN_RED:
		led7SEG_GR();
 8001380:	f7ff fed8 	bl	8001134 <led7SEG_GR>
		break;
 8001384:	e003      	b.n	800138e <display7SEG+0x3e>
	case YELLOW_RED:
		led7SEG_YR();
 8001386:	f7ff fe7b 	bl	8001080 <led7SEG_YR>
		break;
 800138a:	e000      	b.n	800138e <display7SEG+0x3e>
	default:
		break;
 800138c:	bf00      	nop
	}
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000048 	.word	0x20000048

08001398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800139c:	f000 fc20 	bl	8001be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a0:	f000 f80e 	bl	80013c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a4:	f000 f894 	bl	80014d0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80013a8:	f000 f846 	bl	8001438 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80013ac:	4803      	ldr	r0, [pc, #12]	; (80013bc <main+0x24>)
 80013ae:	f001 fb75 	bl	8002a9c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  updateBuffer();
 80013b2:	f7ff fd6d 	bl	8000e90 <updateBuffer>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  fsm_automatic();
	  fsm_manual();
 80013b6:	f7ff f8bb 	bl	8000530 <fsm_manual>
 80013ba:	e7fc      	b.n	80013b6 <main+0x1e>
 80013bc:	20000110 	.word	0x20000110

080013c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b090      	sub	sp, #64	; 0x40
 80013c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c6:	f107 0318 	add.w	r3, r7, #24
 80013ca:	2228      	movs	r2, #40	; 0x28
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f001 ff14 	bl	80031fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013e2:	2302      	movs	r3, #2
 80013e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e6:	2301      	movs	r3, #1
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ea:	2310      	movs	r3, #16
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f2:	f107 0318 	add.w	r3, r7, #24
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 ff24 	bl	8002244 <HAL_RCC_OscConfig>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001402:	f000 f8c9 	bl	8001598 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001406:	230f      	movs	r3, #15
 8001408:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f001 f990 	bl	8002744 <HAL_RCC_ClockConfig>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800142a:	f000 f8b5 	bl	8001598 <Error_Handler>
  }
}
 800142e:	bf00      	nop
 8001430:	3740      	adds	r7, #64	; 0x40
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143e:	f107 0308 	add.w	r3, r7, #8
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144c:	463b      	mov	r3, r7
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001454:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <MX_TIM2_Init+0x94>)
 8001456:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800145a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800145c:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <MX_TIM2_Init+0x94>)
 800145e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001462:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001464:	4b19      	ldr	r3, [pc, #100]	; (80014cc <MX_TIM2_Init+0x94>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800146a:	4b18      	ldr	r3, [pc, #96]	; (80014cc <MX_TIM2_Init+0x94>)
 800146c:	2209      	movs	r2, #9
 800146e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001470:	4b16      	ldr	r3, [pc, #88]	; (80014cc <MX_TIM2_Init+0x94>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <MX_TIM2_Init+0x94>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800147c:	4813      	ldr	r0, [pc, #76]	; (80014cc <MX_TIM2_Init+0x94>)
 800147e:	f001 fabd 	bl	80029fc <HAL_TIM_Base_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001488:	f000 f886 	bl	8001598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001490:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001492:	f107 0308 	add.w	r3, r7, #8
 8001496:	4619      	mov	r1, r3
 8001498:	480c      	ldr	r0, [pc, #48]	; (80014cc <MX_TIM2_Init+0x94>)
 800149a:	f001 fc3b 	bl	8002d14 <HAL_TIM_ConfigClockSource>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80014a4:	f000 f878 	bl	8001598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a8:	2300      	movs	r3, #0
 80014aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014b0:	463b      	mov	r3, r7
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_TIM2_Init+0x94>)
 80014b6:	f001 fe13 	bl	80030e0 <HAL_TIMEx_MasterConfigSynchronization>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014c0:	f000 f86a 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000110 	.word	0x20000110

080014d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d6:	f107 0308 	add.w	r3, r7, #8
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80014e4:	4b23      	ldr	r3, [pc, #140]	; (8001574 <MX_GPIO_Init+0xa4>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	4a22      	ldr	r2, [pc, #136]	; (8001574 <MX_GPIO_Init+0xa4>)
 80014ea:	f043 0304 	orr.w	r3, r3, #4
 80014ee:	6193      	str	r3, [r2, #24]
 80014f0:	4b20      	ldr	r3, [pc, #128]	; (8001574 <MX_GPIO_Init+0xa4>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80014fc:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <MX_GPIO_Init+0xa4>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	4a1c      	ldr	r2, [pc, #112]	; (8001574 <MX_GPIO_Init+0xa4>)
 8001502:	f043 0308 	orr.w	r3, r3, #8
 8001506:	6193      	str	r3, [r2, #24]
 8001508:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <MX_GPIO_Init+0xa4>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f003 0308 	and.w	r3, r3, #8
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = LED_RED|EN0|EN1|EN2|EN3|
 8001514:	f640 73fe 	movw	r3, #4094	; 0xffe
 8001518:	60bb      	str	r3, [r7, #8]
			REDA|REDB|YELLOWA|YELLOWB|GREENA|GREENB;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151a:	2301      	movs	r3, #1
 800151c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2302      	movs	r3, #2
 8001524:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001526:	f107 0308 	add.w	r3, r7, #8
 800152a:	4619      	mov	r1, r3
 800152c:	4812      	ldr	r0, [pc, #72]	; (8001578 <MX_GPIO_Init+0xa8>)
 800152e:	f000 fcc7 	bl	8001ec0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = BUT1|BUT2|BUT3;
 8001532:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001536:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800153c:	2301      	movs	r3, #1
 800153e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001540:	f107 0308 	add.w	r3, r7, #8
 8001544:	4619      	mov	r1, r3
 8001546:	480c      	ldr	r0, [pc, #48]	; (8001578 <MX_GPIO_Init+0xa8>)
 8001548:	f000 fcba 	bl	8001ec0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = SEG1_0|SEG1_1|SEG1_2|SEG1_3|SEG1_4|SEG1_5|SEG1_6|
 800154c:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001550:	60bb      	str	r3, [r7, #8]
			SEG2_0|SEG2_1|SEG2_2|SEG2_3|SEG2_4|SEG2_5|SEG2_6;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001552:	2301      	movs	r3, #1
 8001554:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	2302      	movs	r3, #2
 800155c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155e:	f107 0308 	add.w	r3, r7, #8
 8001562:	4619      	mov	r1, r3
 8001564:	4805      	ldr	r0, [pc, #20]	; (800157c <MX_GPIO_Init+0xac>)
 8001566:	f000 fcab 	bl	8001ec0 <HAL_GPIO_Init>
}
 800156a:	bf00      	nop
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40021000 	.word	0x40021000
 8001578:	40010800 	.word	0x40010800
 800157c:	40010c00 	.word	0x40010c00

08001580 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	timerRun();
 8001588:	f000 f8a8 	bl	80016dc <timerRun>
	getKeyInput();
 800158c:	f7fe fe08 	bl	80001a0 <getKeyInput>
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800159c:	b672      	cpsid	i
}
 800159e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <Error_Handler+0x8>
	...

080015a4 <setTimer1>:
int timer_counter9 = 0;

int timer_flag10 = 0;
int timer_counter10 = 0;

void setTimer1(int duration){
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	timer_flag1 = 0;
 80015ac:	4b07      	ldr	r3, [pc, #28]	; (80015cc <setTimer1+0x28>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
	timer_counter1 = duration / TICK;
 80015b2:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <setTimer1+0x2c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80015bc:	4a05      	ldr	r2, [pc, #20]	; (80015d4 <setTimer1+0x30>)
 80015be:	6013      	str	r3, [r2, #0]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	200000c0 	.word	0x200000c0
 80015d0:	2000005c 	.word	0x2000005c
 80015d4:	200000c4 	.word	0x200000c4

080015d8 <setTimer2>:

void setTimer2(int duration){
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	timer_flag2 = 0;
 80015e0:	4b07      	ldr	r3, [pc, #28]	; (8001600 <setTimer2+0x28>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
	timer_counter2 = duration / TICK;
 80015e6:	4b07      	ldr	r3, [pc, #28]	; (8001604 <setTimer2+0x2c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80015f0:	4a05      	ldr	r2, [pc, #20]	; (8001608 <setTimer2+0x30>)
 80015f2:	6013      	str	r3, [r2, #0]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	200000c8 	.word	0x200000c8
 8001604:	2000005c 	.word	0x2000005c
 8001608:	200000cc 	.word	0x200000cc

0800160c <setTimer3>:

void setTimer3(int duration){
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	timer_flag3 = 0;
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <setTimer3+0x28>)
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
	timer_counter3 = duration / TICK;
 800161a:	4b07      	ldr	r3, [pc, #28]	; (8001638 <setTimer3+0x2c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	fb92 f3f3 	sdiv	r3, r2, r3
 8001624:	4a05      	ldr	r2, [pc, #20]	; (800163c <setTimer3+0x30>)
 8001626:	6013      	str	r3, [r2, #0]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	200000d0 	.word	0x200000d0
 8001638:	2000005c 	.word	0x2000005c
 800163c:	200000d4 	.word	0x200000d4

08001640 <setTimer4>:

void setTimer4(int duration){
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	timer_flag4 = 0;
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <setTimer4+0x28>)
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
	timer_counter4 = duration / TICK;
 800164e:	4b07      	ldr	r3, [pc, #28]	; (800166c <setTimer4+0x2c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	fb92 f3f3 	sdiv	r3, r2, r3
 8001658:	4a05      	ldr	r2, [pc, #20]	; (8001670 <setTimer4+0x30>)
 800165a:	6013      	str	r3, [r2, #0]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	200000d8 	.word	0x200000d8
 800166c:	2000005c 	.word	0x2000005c
 8001670:	200000dc 	.word	0x200000dc

08001674 <setTimer6>:
void setTimer5(int duration){
	timer_flag5 = 0;
	timer_counter5 = duration / TICK;
}

void setTimer6(int duration){
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	timer_flag6 = 0;
 800167c:	4b07      	ldr	r3, [pc, #28]	; (800169c <setTimer6+0x28>)
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
	timer_counter6 = duration / TICK;
 8001682:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <setTimer6+0x2c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	fb92 f3f3 	sdiv	r3, r2, r3
 800168c:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <setTimer6+0x30>)
 800168e:	6013      	str	r3, [r2, #0]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	200000e8 	.word	0x200000e8
 80016a0:	2000005c 	.word	0x2000005c
 80016a4:	200000ec 	.word	0x200000ec

080016a8 <setTimer10>:
void setTimer9(int duration){
	timer_flag9 = 0;
	timer_counter9 = duration / TICK;
}

void setTimer10(int duration){
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	timer_flag10 = 0;
 80016b0:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <setTimer10+0x28>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
	timer_counter10 = duration / TICK;
 80016b6:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <setTimer10+0x2c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80016c0:	4a05      	ldr	r2, [pc, #20]	; (80016d8 <setTimer10+0x30>)
 80016c2:	6013      	str	r3, [r2, #0]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000108 	.word	0x20000108
 80016d4:	2000005c 	.word	0x2000005c
 80016d8:	2000010c 	.word	0x2000010c

080016dc <timerRun>:

void timerRun(){
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
		if(timer_counter1 > 0){
 80016e0:	4b51      	ldr	r3, [pc, #324]	; (8001828 <timerRun+0x14c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	dd0b      	ble.n	8001700 <timerRun+0x24>
			timer_counter1--;
 80016e8:	4b4f      	ldr	r3, [pc, #316]	; (8001828 <timerRun+0x14c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	4a4e      	ldr	r2, [pc, #312]	; (8001828 <timerRun+0x14c>)
 80016f0:	6013      	str	r3, [r2, #0]
		if(timer_counter1 <= 0){
 80016f2:	4b4d      	ldr	r3, [pc, #308]	; (8001828 <timerRun+0x14c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	dc02      	bgt.n	8001700 <timerRun+0x24>
			timer_flag1 = 1;
 80016fa:	4b4c      	ldr	r3, [pc, #304]	; (800182c <timerRun+0x150>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	601a      	str	r2, [r3, #0]
			}
		}

		if(timer_counter2 > 0){
 8001700:	4b4b      	ldr	r3, [pc, #300]	; (8001830 <timerRun+0x154>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	dd0b      	ble.n	8001720 <timerRun+0x44>
			timer_counter2--;
 8001708:	4b49      	ldr	r3, [pc, #292]	; (8001830 <timerRun+0x154>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	3b01      	subs	r3, #1
 800170e:	4a48      	ldr	r2, [pc, #288]	; (8001830 <timerRun+0x154>)
 8001710:	6013      	str	r3, [r2, #0]
		if(timer_counter2 <= 0){
 8001712:	4b47      	ldr	r3, [pc, #284]	; (8001830 <timerRun+0x154>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	dc02      	bgt.n	8001720 <timerRun+0x44>
			timer_flag2 = 1;
 800171a:	4b46      	ldr	r3, [pc, #280]	; (8001834 <timerRun+0x158>)
 800171c:	2201      	movs	r2, #1
 800171e:	601a      	str	r2, [r3, #0]
			}
		}

		if(timer_counter3 > 0){
 8001720:	4b45      	ldr	r3, [pc, #276]	; (8001838 <timerRun+0x15c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	dd0b      	ble.n	8001740 <timerRun+0x64>
			timer_counter3--;
 8001728:	4b43      	ldr	r3, [pc, #268]	; (8001838 <timerRun+0x15c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	3b01      	subs	r3, #1
 800172e:	4a42      	ldr	r2, [pc, #264]	; (8001838 <timerRun+0x15c>)
 8001730:	6013      	str	r3, [r2, #0]
		if(timer_counter3 <= 0){
 8001732:	4b41      	ldr	r3, [pc, #260]	; (8001838 <timerRun+0x15c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	dc02      	bgt.n	8001740 <timerRun+0x64>
			timer_flag3 = 1;
 800173a:	4b40      	ldr	r3, [pc, #256]	; (800183c <timerRun+0x160>)
 800173c:	2201      	movs	r2, #1
 800173e:	601a      	str	r2, [r3, #0]
			}
		}

		if(timer_counter4 > 0){
 8001740:	4b3f      	ldr	r3, [pc, #252]	; (8001840 <timerRun+0x164>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	dd0b      	ble.n	8001760 <timerRun+0x84>
			timer_counter4--;
 8001748:	4b3d      	ldr	r3, [pc, #244]	; (8001840 <timerRun+0x164>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	3b01      	subs	r3, #1
 800174e:	4a3c      	ldr	r2, [pc, #240]	; (8001840 <timerRun+0x164>)
 8001750:	6013      	str	r3, [r2, #0]
		if(timer_counter4 <= 0){
 8001752:	4b3b      	ldr	r3, [pc, #236]	; (8001840 <timerRun+0x164>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	dc02      	bgt.n	8001760 <timerRun+0x84>
			timer_flag4 = 1;
 800175a:	4b3a      	ldr	r3, [pc, #232]	; (8001844 <timerRun+0x168>)
 800175c:	2201      	movs	r2, #1
 800175e:	601a      	str	r2, [r3, #0]
			}
		}

		if(timer_counter5 > 0){
 8001760:	4b39      	ldr	r3, [pc, #228]	; (8001848 <timerRun+0x16c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	dd0b      	ble.n	8001780 <timerRun+0xa4>
			timer_counter5--;
 8001768:	4b37      	ldr	r3, [pc, #220]	; (8001848 <timerRun+0x16c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	3b01      	subs	r3, #1
 800176e:	4a36      	ldr	r2, [pc, #216]	; (8001848 <timerRun+0x16c>)
 8001770:	6013      	str	r3, [r2, #0]
		if(timer_counter5 <= 0){
 8001772:	4b35      	ldr	r3, [pc, #212]	; (8001848 <timerRun+0x16c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	dc02      	bgt.n	8001780 <timerRun+0xa4>
			timer_flag5 = 1;
 800177a:	4b34      	ldr	r3, [pc, #208]	; (800184c <timerRun+0x170>)
 800177c:	2201      	movs	r2, #1
 800177e:	601a      	str	r2, [r3, #0]
			}
		}

		if(timer_counter6 > 0){
 8001780:	4b33      	ldr	r3, [pc, #204]	; (8001850 <timerRun+0x174>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	dd0b      	ble.n	80017a0 <timerRun+0xc4>
			timer_counter6--;
 8001788:	4b31      	ldr	r3, [pc, #196]	; (8001850 <timerRun+0x174>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	3b01      	subs	r3, #1
 800178e:	4a30      	ldr	r2, [pc, #192]	; (8001850 <timerRun+0x174>)
 8001790:	6013      	str	r3, [r2, #0]
		if(timer_counter6 <= 0){
 8001792:	4b2f      	ldr	r3, [pc, #188]	; (8001850 <timerRun+0x174>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	dc02      	bgt.n	80017a0 <timerRun+0xc4>
			timer_flag6 = 1;
 800179a:	4b2e      	ldr	r3, [pc, #184]	; (8001854 <timerRun+0x178>)
 800179c:	2201      	movs	r2, #1
 800179e:	601a      	str	r2, [r3, #0]
			}
		}

		if(timer_counter7 > 0){
 80017a0:	4b2d      	ldr	r3, [pc, #180]	; (8001858 <timerRun+0x17c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	dd0b      	ble.n	80017c0 <timerRun+0xe4>
			timer_counter7--;
 80017a8:	4b2b      	ldr	r3, [pc, #172]	; (8001858 <timerRun+0x17c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	3b01      	subs	r3, #1
 80017ae:	4a2a      	ldr	r2, [pc, #168]	; (8001858 <timerRun+0x17c>)
 80017b0:	6013      	str	r3, [r2, #0]
		if(timer_counter7 <= 0){
 80017b2:	4b29      	ldr	r3, [pc, #164]	; (8001858 <timerRun+0x17c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	dc02      	bgt.n	80017c0 <timerRun+0xe4>
			timer_flag7 = 1;
 80017ba:	4b28      	ldr	r3, [pc, #160]	; (800185c <timerRun+0x180>)
 80017bc:	2201      	movs	r2, #1
 80017be:	601a      	str	r2, [r3, #0]
			}
		}

		if(timer_counter8 > 0){
 80017c0:	4b27      	ldr	r3, [pc, #156]	; (8001860 <timerRun+0x184>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	dd0b      	ble.n	80017e0 <timerRun+0x104>
			timer_counter8--;
 80017c8:	4b25      	ldr	r3, [pc, #148]	; (8001860 <timerRun+0x184>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	3b01      	subs	r3, #1
 80017ce:	4a24      	ldr	r2, [pc, #144]	; (8001860 <timerRun+0x184>)
 80017d0:	6013      	str	r3, [r2, #0]
		if(timer_counter8 <= 0){
 80017d2:	4b23      	ldr	r3, [pc, #140]	; (8001860 <timerRun+0x184>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	dc02      	bgt.n	80017e0 <timerRun+0x104>
			timer_flag8 = 1;
 80017da:	4b22      	ldr	r3, [pc, #136]	; (8001864 <timerRun+0x188>)
 80017dc:	2201      	movs	r2, #1
 80017de:	601a      	str	r2, [r3, #0]
			}
		}

		if(timer_counter9 > 0){
 80017e0:	4b21      	ldr	r3, [pc, #132]	; (8001868 <timerRun+0x18c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	dd0b      	ble.n	8001800 <timerRun+0x124>
			timer_counter9--;
 80017e8:	4b1f      	ldr	r3, [pc, #124]	; (8001868 <timerRun+0x18c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	4a1e      	ldr	r2, [pc, #120]	; (8001868 <timerRun+0x18c>)
 80017f0:	6013      	str	r3, [r2, #0]
		if(timer_counter9 <= 0){
 80017f2:	4b1d      	ldr	r3, [pc, #116]	; (8001868 <timerRun+0x18c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	dc02      	bgt.n	8001800 <timerRun+0x124>
			timer_flag9 = 1;
 80017fa:	4b1c      	ldr	r3, [pc, #112]	; (800186c <timerRun+0x190>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	601a      	str	r2, [r3, #0]
			}
		}

		if(timer_counter10 > 0){
 8001800:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <timerRun+0x194>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	dd0b      	ble.n	8001820 <timerRun+0x144>
			timer_counter10--;
 8001808:	4b19      	ldr	r3, [pc, #100]	; (8001870 <timerRun+0x194>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	3b01      	subs	r3, #1
 800180e:	4a18      	ldr	r2, [pc, #96]	; (8001870 <timerRun+0x194>)
 8001810:	6013      	str	r3, [r2, #0]
		if(timer_counter10 <= 0){
 8001812:	4b17      	ldr	r3, [pc, #92]	; (8001870 <timerRun+0x194>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	dc02      	bgt.n	8001820 <timerRun+0x144>
			timer_flag10 = 1;
 800181a:	4b16      	ldr	r3, [pc, #88]	; (8001874 <timerRun+0x198>)
 800181c:	2201      	movs	r2, #1
 800181e:	601a      	str	r2, [r3, #0]
			}
		}
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	200000c4 	.word	0x200000c4
 800182c:	200000c0 	.word	0x200000c0
 8001830:	200000cc 	.word	0x200000cc
 8001834:	200000c8 	.word	0x200000c8
 8001838:	200000d4 	.word	0x200000d4
 800183c:	200000d0 	.word	0x200000d0
 8001840:	200000dc 	.word	0x200000dc
 8001844:	200000d8 	.word	0x200000d8
 8001848:	200000e4 	.word	0x200000e4
 800184c:	200000e0 	.word	0x200000e0
 8001850:	200000ec 	.word	0x200000ec
 8001854:	200000e8 	.word	0x200000e8
 8001858:	200000f4 	.word	0x200000f4
 800185c:	200000f0 	.word	0x200000f0
 8001860:	200000fc 	.word	0x200000fc
 8001864:	200000f8 	.word	0x200000f8
 8001868:	20000104 	.word	0x20000104
 800186c:	20000100 	.word	0x20000100
 8001870:	2000010c 	.word	0x2000010c
 8001874:	20000108 	.word	0x20000108

08001878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <HAL_MspInit+0x5c>)
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <HAL_MspInit+0x5c>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6193      	str	r3, [r2, #24]
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_MspInit+0x5c>)
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <HAL_MspInit+0x5c>)
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	4a0e      	ldr	r2, [pc, #56]	; (80018d4 <HAL_MspInit+0x5c>)
 800189c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a0:	61d3      	str	r3, [r2, #28]
 80018a2:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <HAL_MspInit+0x5c>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80018ae:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <HAL_MspInit+0x60>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	4a04      	ldr	r2, [pc, #16]	; (80018d8 <HAL_MspInit+0x60>)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ca:	bf00      	nop
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40010000 	.word	0x40010000

080018dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ec:	d113      	bne.n	8001916 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018ee:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <HAL_TIM_Base_MspInit+0x44>)
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <HAL_TIM_Base_MspInit+0x44>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	61d3      	str	r3, [r2, #28]
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <HAL_TIM_Base_MspInit+0x44>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2100      	movs	r1, #0
 800190a:	201c      	movs	r0, #28
 800190c:	f000 faa1 	bl	8001e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001910:	201c      	movs	r0, #28
 8001912:	f000 faba 	bl	8001e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40021000 	.word	0x40021000

08001924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <NMI_Handler+0x4>

0800192a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192e:	e7fe      	b.n	800192e <HardFault_Handler+0x4>

08001930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <MemManage_Handler+0x4>

08001936 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800193a:	e7fe      	b.n	800193a <BusFault_Handler+0x4>

0800193c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <UsageFault_Handler+0x4>

08001942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr

0800194e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr

0800195a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr

08001966 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800196a:	f000 f97f 	bl	8001c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001978:	4802      	ldr	r0, [pc, #8]	; (8001984 <TIM2_IRQHandler+0x10>)
 800197a:	f001 f8db 	bl	8002b34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000110 	.word	0x20000110

08001988 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <toggleLedRed>:
#include "main.h"
#include "global.h"
#include "led7_segment.h"
#include "software_timer.h"

void toggleLedRed(){
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED_RED);
 8001998:	2120      	movs	r1, #32
 800199a:	4802      	ldr	r0, [pc, #8]	; (80019a4 <toggleLedRed+0x10>)
 800199c:	f000 fc39 	bl	8002212 <HAL_GPIO_TogglePin>
}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40010800 	.word	0x40010800

080019a8 <toggleAllRed>:

void toggleAllRed(){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, YELLOWB, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2140      	movs	r1, #64	; 0x40
 80019b0:	480d      	ldr	r0, [pc, #52]	; (80019e8 <toggleAllRed+0x40>)
 80019b2:	f000 fc16 	bl	80021e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREENB, GPIO_PIN_RESET);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2180      	movs	r1, #128	; 0x80
 80019ba:	480b      	ldr	r0, [pc, #44]	; (80019e8 <toggleAllRed+0x40>)
 80019bc:	f000 fc11 	bl	80021e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOWA, GPIO_PIN_RESET);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2104      	movs	r1, #4
 80019c4:	4808      	ldr	r0, [pc, #32]	; (80019e8 <toggleAllRed+0x40>)
 80019c6:	f000 fc0c 	bl	80021e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREENA, GPIO_PIN_RESET);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2108      	movs	r1, #8
 80019ce:	4806      	ldr	r0, [pc, #24]	; (80019e8 <toggleAllRed+0x40>)
 80019d0:	f000 fc07 	bl	80021e2 <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(GPIOA, REDA);
 80019d4:	2102      	movs	r1, #2
 80019d6:	4804      	ldr	r0, [pc, #16]	; (80019e8 <toggleAllRed+0x40>)
 80019d8:	f000 fc1b 	bl	8002212 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, REDB);
 80019dc:	2110      	movs	r1, #16
 80019de:	4802      	ldr	r0, [pc, #8]	; (80019e8 <toggleAllRed+0x40>)
 80019e0:	f000 fc17 	bl	8002212 <HAL_GPIO_TogglePin>
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40010800 	.word	0x40010800

080019ec <toggleAllGreen>:

void toggleAllGreen(){
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, YELLOWB, GPIO_PIN_RESET);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2140      	movs	r1, #64	; 0x40
 80019f4:	480d      	ldr	r0, [pc, #52]	; (8001a2c <toggleAllGreen+0x40>)
 80019f6:	f000 fbf4 	bl	80021e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, REDB, GPIO_PIN_RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2110      	movs	r1, #16
 80019fe:	480b      	ldr	r0, [pc, #44]	; (8001a2c <toggleAllGreen+0x40>)
 8001a00:	f000 fbef 	bl	80021e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOWA, GPIO_PIN_RESET);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2104      	movs	r1, #4
 8001a08:	4808      	ldr	r0, [pc, #32]	; (8001a2c <toggleAllGreen+0x40>)
 8001a0a:	f000 fbea 	bl	80021e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, REDA, GPIO_PIN_RESET);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2102      	movs	r1, #2
 8001a12:	4806      	ldr	r0, [pc, #24]	; (8001a2c <toggleAllGreen+0x40>)
 8001a14:	f000 fbe5 	bl	80021e2 <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(GPIOA, GREENA);
 8001a18:	2108      	movs	r1, #8
 8001a1a:	4804      	ldr	r0, [pc, #16]	; (8001a2c <toggleAllGreen+0x40>)
 8001a1c:	f000 fbf9 	bl	8002212 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GREENB);
 8001a20:	2180      	movs	r1, #128	; 0x80
 8001a22:	4802      	ldr	r0, [pc, #8]	; (8001a2c <toggleAllGreen+0x40>)
 8001a24:	f000 fbf5 	bl	8002212 <HAL_GPIO_TogglePin>
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40010800 	.word	0x40010800

08001a30 <toggleAllYellow>:

void toggleAllYellow(){
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GREENB, GPIO_PIN_RESET);
 8001a34:	2200      	movs	r2, #0
 8001a36:	2180      	movs	r1, #128	; 0x80
 8001a38:	480d      	ldr	r0, [pc, #52]	; (8001a70 <toggleAllYellow+0x40>)
 8001a3a:	f000 fbd2 	bl	80021e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, REDB, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2110      	movs	r1, #16
 8001a42:	480b      	ldr	r0, [pc, #44]	; (8001a70 <toggleAllYellow+0x40>)
 8001a44:	f000 fbcd 	bl	80021e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREENA, GPIO_PIN_RESET);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2108      	movs	r1, #8
 8001a4c:	4808      	ldr	r0, [pc, #32]	; (8001a70 <toggleAllYellow+0x40>)
 8001a4e:	f000 fbc8 	bl	80021e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, REDA, GPIO_PIN_RESET);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2102      	movs	r1, #2
 8001a56:	4806      	ldr	r0, [pc, #24]	; (8001a70 <toggleAllYellow+0x40>)
 8001a58:	f000 fbc3 	bl	80021e2 <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(GPIOA, YELLOWA);
 8001a5c:	2104      	movs	r1, #4
 8001a5e:	4804      	ldr	r0, [pc, #16]	; (8001a70 <toggleAllYellow+0x40>)
 8001a60:	f000 fbd7 	bl	8002212 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, YELLOWB);
 8001a64:	2140      	movs	r1, #64	; 0x40
 8001a66:	4802      	ldr	r0, [pc, #8]	; (8001a70 <toggleAllYellow+0x40>)
 8001a68:	f000 fbd3 	bl	8002212 <HAL_GPIO_TogglePin>
}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40010800 	.word	0x40010800

08001a74 <setRedAGreenB>:

void setRedAGreenB()
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, REDA, GPIO_PIN_SET);
 8001a78:	2201      	movs	r2, #1
 8001a7a:	2102      	movs	r1, #2
 8001a7c:	480e      	ldr	r0, [pc, #56]	; (8001ab8 <setRedAGreenB+0x44>)
 8001a7e:	f000 fbb0 	bl	80021e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOWA, GPIO_PIN_RESET);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2104      	movs	r1, #4
 8001a86:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <setRedAGreenB+0x44>)
 8001a88:	f000 fbab 	bl	80021e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREENA, GPIO_PIN_RESET);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2108      	movs	r1, #8
 8001a90:	4809      	ldr	r0, [pc, #36]	; (8001ab8 <setRedAGreenB+0x44>)
 8001a92:	f000 fba6 	bl	80021e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, REDB, GPIO_PIN_RESET);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2110      	movs	r1, #16
 8001a9a:	4807      	ldr	r0, [pc, #28]	; (8001ab8 <setRedAGreenB+0x44>)
 8001a9c:	f000 fba1 	bl	80021e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOWB, GPIO_PIN_RESET);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2140      	movs	r1, #64	; 0x40
 8001aa4:	4804      	ldr	r0, [pc, #16]	; (8001ab8 <setRedAGreenB+0x44>)
 8001aa6:	f000 fb9c 	bl	80021e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREENB, GPIO_PIN_SET);
 8001aaa:	2201      	movs	r2, #1
 8001aac:	2180      	movs	r1, #128	; 0x80
 8001aae:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <setRedAGreenB+0x44>)
 8001ab0:	f000 fb97 	bl	80021e2 <HAL_GPIO_WritePin>
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40010800 	.word	0x40010800

08001abc <setRedAYellowB>:

void setRedAYellowB()
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, REDA, GPIO_PIN_SET);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	2102      	movs	r1, #2
 8001ac4:	480e      	ldr	r0, [pc, #56]	; (8001b00 <setRedAYellowB+0x44>)
 8001ac6:	f000 fb8c 	bl	80021e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOWA, GPIO_PIN_RESET);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2104      	movs	r1, #4
 8001ace:	480c      	ldr	r0, [pc, #48]	; (8001b00 <setRedAYellowB+0x44>)
 8001ad0:	f000 fb87 	bl	80021e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREENA, GPIO_PIN_RESET);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2108      	movs	r1, #8
 8001ad8:	4809      	ldr	r0, [pc, #36]	; (8001b00 <setRedAYellowB+0x44>)
 8001ada:	f000 fb82 	bl	80021e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, REDB, GPIO_PIN_RESET);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2110      	movs	r1, #16
 8001ae2:	4807      	ldr	r0, [pc, #28]	; (8001b00 <setRedAYellowB+0x44>)
 8001ae4:	f000 fb7d 	bl	80021e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOWB, GPIO_PIN_SET);
 8001ae8:	2201      	movs	r2, #1
 8001aea:	2140      	movs	r1, #64	; 0x40
 8001aec:	4804      	ldr	r0, [pc, #16]	; (8001b00 <setRedAYellowB+0x44>)
 8001aee:	f000 fb78 	bl	80021e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREENB, GPIO_PIN_RESET);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2180      	movs	r1, #128	; 0x80
 8001af6:	4802      	ldr	r0, [pc, #8]	; (8001b00 <setRedAYellowB+0x44>)
 8001af8:	f000 fb73 	bl	80021e2 <HAL_GPIO_WritePin>
}
 8001afc:	bf00      	nop
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40010800 	.word	0x40010800

08001b04 <setGreenARedB>:

void setGreenARedB()
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, REDA, GPIO_PIN_RESET);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2102      	movs	r1, #2
 8001b0c:	480e      	ldr	r0, [pc, #56]	; (8001b48 <setGreenARedB+0x44>)
 8001b0e:	f000 fb68 	bl	80021e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOWA, GPIO_PIN_RESET);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2104      	movs	r1, #4
 8001b16:	480c      	ldr	r0, [pc, #48]	; (8001b48 <setGreenARedB+0x44>)
 8001b18:	f000 fb63 	bl	80021e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREENA, GPIO_PIN_SET);
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	2108      	movs	r1, #8
 8001b20:	4809      	ldr	r0, [pc, #36]	; (8001b48 <setGreenARedB+0x44>)
 8001b22:	f000 fb5e 	bl	80021e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, REDB, GPIO_PIN_SET);
 8001b26:	2201      	movs	r2, #1
 8001b28:	2110      	movs	r1, #16
 8001b2a:	4807      	ldr	r0, [pc, #28]	; (8001b48 <setGreenARedB+0x44>)
 8001b2c:	f000 fb59 	bl	80021e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOWB, GPIO_PIN_RESET);
 8001b30:	2200      	movs	r2, #0
 8001b32:	2140      	movs	r1, #64	; 0x40
 8001b34:	4804      	ldr	r0, [pc, #16]	; (8001b48 <setGreenARedB+0x44>)
 8001b36:	f000 fb54 	bl	80021e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREENB, GPIO_PIN_RESET);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2180      	movs	r1, #128	; 0x80
 8001b3e:	4802      	ldr	r0, [pc, #8]	; (8001b48 <setGreenARedB+0x44>)
 8001b40:	f000 fb4f 	bl	80021e2 <HAL_GPIO_WritePin>
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40010800 	.word	0x40010800

08001b4c <setYellowARedB>:

void setYellowARedB()
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, REDA, GPIO_PIN_RESET);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2102      	movs	r1, #2
 8001b54:	480e      	ldr	r0, [pc, #56]	; (8001b90 <setYellowARedB+0x44>)
 8001b56:	f000 fb44 	bl	80021e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOWA, GPIO_PIN_SET);
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	2104      	movs	r1, #4
 8001b5e:	480c      	ldr	r0, [pc, #48]	; (8001b90 <setYellowARedB+0x44>)
 8001b60:	f000 fb3f 	bl	80021e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREENA, GPIO_PIN_RESET);
 8001b64:	2200      	movs	r2, #0
 8001b66:	2108      	movs	r1, #8
 8001b68:	4809      	ldr	r0, [pc, #36]	; (8001b90 <setYellowARedB+0x44>)
 8001b6a:	f000 fb3a 	bl	80021e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, REDB, GPIO_PIN_SET);
 8001b6e:	2201      	movs	r2, #1
 8001b70:	2110      	movs	r1, #16
 8001b72:	4807      	ldr	r0, [pc, #28]	; (8001b90 <setYellowARedB+0x44>)
 8001b74:	f000 fb35 	bl	80021e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOWB, GPIO_PIN_RESET);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2140      	movs	r1, #64	; 0x40
 8001b7c:	4804      	ldr	r0, [pc, #16]	; (8001b90 <setYellowARedB+0x44>)
 8001b7e:	f000 fb30 	bl	80021e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREENB, GPIO_PIN_RESET);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2180      	movs	r1, #128	; 0x80
 8001b86:	4802      	ldr	r0, [pc, #8]	; (8001b90 <setYellowARedB+0x44>)
 8001b88:	f000 fb2b 	bl	80021e2 <HAL_GPIO_WritePin>
}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40010800 	.word	0x40010800

08001b94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b94:	f7ff fef8 	bl	8001988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b98:	480b      	ldr	r0, [pc, #44]	; (8001bc8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b9a:	490c      	ldr	r1, [pc, #48]	; (8001bcc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b9c:	4a0c      	ldr	r2, [pc, #48]	; (8001bd0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba0:	e002      	b.n	8001ba8 <LoopCopyDataInit>

08001ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba6:	3304      	adds	r3, #4

08001ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bac:	d3f9      	bcc.n	8001ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bae:	4a09      	ldr	r2, [pc, #36]	; (8001bd4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bb0:	4c09      	ldr	r4, [pc, #36]	; (8001bd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb4:	e001      	b.n	8001bba <LoopFillZerobss>

08001bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb8:	3204      	adds	r2, #4

08001bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bbc:	d3fb      	bcc.n	8001bb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bbe:	f001 faf9 	bl	80031b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bc2:	f7ff fbe9 	bl	8001398 <main>
  bx lr
 8001bc6:	4770      	bx	lr
  ldr r0, =_sdata
 8001bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bcc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001bd0:	08003250 	.word	0x08003250
  ldr r2, =_sbss
 8001bd4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001bd8:	2000015c 	.word	0x2000015c

08001bdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bdc:	e7fe      	b.n	8001bdc <ADC1_2_IRQHandler>
	...

08001be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be4:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <HAL_Init+0x28>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a07      	ldr	r2, [pc, #28]	; (8001c08 <HAL_Init+0x28>)
 8001bea:	f043 0310 	orr.w	r3, r3, #16
 8001bee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf0:	2003      	movs	r0, #3
 8001bf2:	f000 f923 	bl	8001e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bf6:	200f      	movs	r0, #15
 8001bf8:	f000 f808 	bl	8001c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bfc:	f7ff fe3c 	bl	8001878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40022000 	.word	0x40022000

08001c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_InitTick+0x54>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_InitTick+0x58>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 f93b 	bl	8001ea6 <HAL_SYSTICK_Config>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e00e      	b.n	8001c58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b0f      	cmp	r3, #15
 8001c3e:	d80a      	bhi.n	8001c56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c40:	2200      	movs	r2, #0
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295
 8001c48:	f000 f903 	bl	8001e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c4c:	4a06      	ldr	r2, [pc, #24]	; (8001c68 <HAL_InitTick+0x5c>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e000      	b.n	8001c58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000060 	.word	0x20000060
 8001c64:	20000068 	.word	0x20000068
 8001c68:	20000064 	.word	0x20000064

08001c6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <HAL_IncTick+0x1c>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <HAL_IncTick+0x20>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	4a03      	ldr	r2, [pc, #12]	; (8001c8c <HAL_IncTick+0x20>)
 8001c7e:	6013      	str	r3, [r2, #0]
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr
 8001c88:	20000068 	.word	0x20000068
 8001c8c:	20000158 	.word	0x20000158

08001c90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return uwTick;
 8001c94:	4b02      	ldr	r3, [pc, #8]	; (8001ca0 <HAL_GetTick+0x10>)
 8001c96:	681b      	ldr	r3, [r3, #0]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr
 8001ca0:	20000158 	.word	0x20000158

08001ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd6:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	60d3      	str	r3, [r2, #12]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	0a1b      	lsrs	r3, r3, #8
 8001cf6:	f003 0307 	and.w	r3, r3, #7
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	db0b      	blt.n	8001d32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	f003 021f 	and.w	r2, r3, #31
 8001d20:	4906      	ldr	r1, [pc, #24]	; (8001d3c <__NVIC_EnableIRQ+0x34>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	2001      	movs	r0, #1
 8001d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	e000e100 	.word	0xe000e100

08001d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	6039      	str	r1, [r7, #0]
 8001d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	db0a      	blt.n	8001d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	490c      	ldr	r1, [pc, #48]	; (8001d8c <__NVIC_SetPriority+0x4c>)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	0112      	lsls	r2, r2, #4
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	440b      	add	r3, r1
 8001d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d68:	e00a      	b.n	8001d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	4908      	ldr	r1, [pc, #32]	; (8001d90 <__NVIC_SetPriority+0x50>)
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	3b04      	subs	r3, #4
 8001d78:	0112      	lsls	r2, r2, #4
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	761a      	strb	r2, [r3, #24]
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000e100 	.word	0xe000e100
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b089      	sub	sp, #36	; 0x24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f1c3 0307 	rsb	r3, r3, #7
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	bf28      	it	cs
 8001db2:	2304      	movcs	r3, #4
 8001db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3304      	adds	r3, #4
 8001dba:	2b06      	cmp	r3, #6
 8001dbc:	d902      	bls.n	8001dc4 <NVIC_EncodePriority+0x30>
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3b03      	subs	r3, #3
 8001dc2:	e000      	b.n	8001dc6 <NVIC_EncodePriority+0x32>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	401a      	ands	r2, r3
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	43d9      	mvns	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	4313      	orrs	r3, r2
         );
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3724      	adds	r7, #36	; 0x24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e08:	d301      	bcc.n	8001e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e00f      	b.n	8001e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e0e:	4a0a      	ldr	r2, [pc, #40]	; (8001e38 <SysTick_Config+0x40>)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e16:	210f      	movs	r1, #15
 8001e18:	f04f 30ff 	mov.w	r0, #4294967295
 8001e1c:	f7ff ff90 	bl	8001d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <SysTick_Config+0x40>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e26:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <SysTick_Config+0x40>)
 8001e28:	2207      	movs	r2, #7
 8001e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	e000e010 	.word	0xe000e010

08001e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ff2d 	bl	8001ca4 <__NVIC_SetPriorityGrouping>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b086      	sub	sp, #24
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	4603      	mov	r3, r0
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
 8001e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e64:	f7ff ff42 	bl	8001cec <__NVIC_GetPriorityGrouping>
 8001e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	68b9      	ldr	r1, [r7, #8]
 8001e6e:	6978      	ldr	r0, [r7, #20]
 8001e70:	f7ff ff90 	bl	8001d94 <NVIC_EncodePriority>
 8001e74:	4602      	mov	r2, r0
 8001e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff5f 	bl	8001d40 <__NVIC_SetPriority>
}
 8001e82:	bf00      	nop
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	4603      	mov	r3, r0
 8001e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ff35 	bl	8001d08 <__NVIC_EnableIRQ>
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff ffa2 	bl	8001df8 <SysTick_Config>
 8001eb4:	4603      	mov	r3, r0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b08b      	sub	sp, #44	; 0x2c
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed2:	e148      	b.n	8002166 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	69fa      	ldr	r2, [r7, #28]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	f040 8137 	bne.w	8002160 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	4aa3      	ldr	r2, [pc, #652]	; (8002184 <HAL_GPIO_Init+0x2c4>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d05e      	beq.n	8001fba <HAL_GPIO_Init+0xfa>
 8001efc:	4aa1      	ldr	r2, [pc, #644]	; (8002184 <HAL_GPIO_Init+0x2c4>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d875      	bhi.n	8001fee <HAL_GPIO_Init+0x12e>
 8001f02:	4aa1      	ldr	r2, [pc, #644]	; (8002188 <HAL_GPIO_Init+0x2c8>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d058      	beq.n	8001fba <HAL_GPIO_Init+0xfa>
 8001f08:	4a9f      	ldr	r2, [pc, #636]	; (8002188 <HAL_GPIO_Init+0x2c8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d86f      	bhi.n	8001fee <HAL_GPIO_Init+0x12e>
 8001f0e:	4a9f      	ldr	r2, [pc, #636]	; (800218c <HAL_GPIO_Init+0x2cc>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d052      	beq.n	8001fba <HAL_GPIO_Init+0xfa>
 8001f14:	4a9d      	ldr	r2, [pc, #628]	; (800218c <HAL_GPIO_Init+0x2cc>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d869      	bhi.n	8001fee <HAL_GPIO_Init+0x12e>
 8001f1a:	4a9d      	ldr	r2, [pc, #628]	; (8002190 <HAL_GPIO_Init+0x2d0>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d04c      	beq.n	8001fba <HAL_GPIO_Init+0xfa>
 8001f20:	4a9b      	ldr	r2, [pc, #620]	; (8002190 <HAL_GPIO_Init+0x2d0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d863      	bhi.n	8001fee <HAL_GPIO_Init+0x12e>
 8001f26:	4a9b      	ldr	r2, [pc, #620]	; (8002194 <HAL_GPIO_Init+0x2d4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d046      	beq.n	8001fba <HAL_GPIO_Init+0xfa>
 8001f2c:	4a99      	ldr	r2, [pc, #612]	; (8002194 <HAL_GPIO_Init+0x2d4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d85d      	bhi.n	8001fee <HAL_GPIO_Init+0x12e>
 8001f32:	2b12      	cmp	r3, #18
 8001f34:	d82a      	bhi.n	8001f8c <HAL_GPIO_Init+0xcc>
 8001f36:	2b12      	cmp	r3, #18
 8001f38:	d859      	bhi.n	8001fee <HAL_GPIO_Init+0x12e>
 8001f3a:	a201      	add	r2, pc, #4	; (adr r2, 8001f40 <HAL_GPIO_Init+0x80>)
 8001f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f40:	08001fbb 	.word	0x08001fbb
 8001f44:	08001f95 	.word	0x08001f95
 8001f48:	08001fa7 	.word	0x08001fa7
 8001f4c:	08001fe9 	.word	0x08001fe9
 8001f50:	08001fef 	.word	0x08001fef
 8001f54:	08001fef 	.word	0x08001fef
 8001f58:	08001fef 	.word	0x08001fef
 8001f5c:	08001fef 	.word	0x08001fef
 8001f60:	08001fef 	.word	0x08001fef
 8001f64:	08001fef 	.word	0x08001fef
 8001f68:	08001fef 	.word	0x08001fef
 8001f6c:	08001fef 	.word	0x08001fef
 8001f70:	08001fef 	.word	0x08001fef
 8001f74:	08001fef 	.word	0x08001fef
 8001f78:	08001fef 	.word	0x08001fef
 8001f7c:	08001fef 	.word	0x08001fef
 8001f80:	08001fef 	.word	0x08001fef
 8001f84:	08001f9d 	.word	0x08001f9d
 8001f88:	08001fb1 	.word	0x08001fb1
 8001f8c:	4a82      	ldr	r2, [pc, #520]	; (8002198 <HAL_GPIO_Init+0x2d8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d013      	beq.n	8001fba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f92:	e02c      	b.n	8001fee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	623b      	str	r3, [r7, #32]
          break;
 8001f9a:	e029      	b.n	8001ff0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	623b      	str	r3, [r7, #32]
          break;
 8001fa4:	e024      	b.n	8001ff0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	3308      	adds	r3, #8
 8001fac:	623b      	str	r3, [r7, #32]
          break;
 8001fae:	e01f      	b.n	8001ff0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	330c      	adds	r3, #12
 8001fb6:	623b      	str	r3, [r7, #32]
          break;
 8001fb8:	e01a      	b.n	8001ff0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d102      	bne.n	8001fc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fc2:	2304      	movs	r3, #4
 8001fc4:	623b      	str	r3, [r7, #32]
          break;
 8001fc6:	e013      	b.n	8001ff0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d105      	bne.n	8001fdc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fd0:	2308      	movs	r3, #8
 8001fd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69fa      	ldr	r2, [r7, #28]
 8001fd8:	611a      	str	r2, [r3, #16]
          break;
 8001fda:	e009      	b.n	8001ff0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fdc:	2308      	movs	r3, #8
 8001fde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69fa      	ldr	r2, [r7, #28]
 8001fe4:	615a      	str	r2, [r3, #20]
          break;
 8001fe6:	e003      	b.n	8001ff0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	623b      	str	r3, [r7, #32]
          break;
 8001fec:	e000      	b.n	8001ff0 <HAL_GPIO_Init+0x130>
          break;
 8001fee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	2bff      	cmp	r3, #255	; 0xff
 8001ff4:	d801      	bhi.n	8001ffa <HAL_GPIO_Init+0x13a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	e001      	b.n	8001ffe <HAL_GPIO_Init+0x13e>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	2bff      	cmp	r3, #255	; 0xff
 8002004:	d802      	bhi.n	800200c <HAL_GPIO_Init+0x14c>
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	e002      	b.n	8002012 <HAL_GPIO_Init+0x152>
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	3b08      	subs	r3, #8
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	210f      	movs	r1, #15
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	fa01 f303 	lsl.w	r3, r1, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	401a      	ands	r2, r3
 8002024:	6a39      	ldr	r1, [r7, #32]
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	fa01 f303 	lsl.w	r3, r1, r3
 800202c:	431a      	orrs	r2, r3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 8090 	beq.w	8002160 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002040:	4b56      	ldr	r3, [pc, #344]	; (800219c <HAL_GPIO_Init+0x2dc>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	4a55      	ldr	r2, [pc, #340]	; (800219c <HAL_GPIO_Init+0x2dc>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	6193      	str	r3, [r2, #24]
 800204c:	4b53      	ldr	r3, [pc, #332]	; (800219c <HAL_GPIO_Init+0x2dc>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002058:	4a51      	ldr	r2, [pc, #324]	; (80021a0 <HAL_GPIO_Init+0x2e0>)
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	089b      	lsrs	r3, r3, #2
 800205e:	3302      	adds	r3, #2
 8002060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002064:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	220f      	movs	r2, #15
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4013      	ands	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a49      	ldr	r2, [pc, #292]	; (80021a4 <HAL_GPIO_Init+0x2e4>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d00d      	beq.n	80020a0 <HAL_GPIO_Init+0x1e0>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a48      	ldr	r2, [pc, #288]	; (80021a8 <HAL_GPIO_Init+0x2e8>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d007      	beq.n	800209c <HAL_GPIO_Init+0x1dc>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a47      	ldr	r2, [pc, #284]	; (80021ac <HAL_GPIO_Init+0x2ec>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d101      	bne.n	8002098 <HAL_GPIO_Init+0x1d8>
 8002094:	2302      	movs	r3, #2
 8002096:	e004      	b.n	80020a2 <HAL_GPIO_Init+0x1e2>
 8002098:	2303      	movs	r3, #3
 800209a:	e002      	b.n	80020a2 <HAL_GPIO_Init+0x1e2>
 800209c:	2301      	movs	r3, #1
 800209e:	e000      	b.n	80020a2 <HAL_GPIO_Init+0x1e2>
 80020a0:	2300      	movs	r3, #0
 80020a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a4:	f002 0203 	and.w	r2, r2, #3
 80020a8:	0092      	lsls	r2, r2, #2
 80020aa:	4093      	lsls	r3, r2
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020b2:	493b      	ldr	r1, [pc, #236]	; (80021a0 <HAL_GPIO_Init+0x2e0>)
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	089b      	lsrs	r3, r3, #2
 80020b8:	3302      	adds	r3, #2
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d006      	beq.n	80020da <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020cc:	4b38      	ldr	r3, [pc, #224]	; (80021b0 <HAL_GPIO_Init+0x2f0>)
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	4937      	ldr	r1, [pc, #220]	; (80021b0 <HAL_GPIO_Init+0x2f0>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	608b      	str	r3, [r1, #8]
 80020d8:	e006      	b.n	80020e8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020da:	4b35      	ldr	r3, [pc, #212]	; (80021b0 <HAL_GPIO_Init+0x2f0>)
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	4933      	ldr	r1, [pc, #204]	; (80021b0 <HAL_GPIO_Init+0x2f0>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d006      	beq.n	8002102 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020f4:	4b2e      	ldr	r3, [pc, #184]	; (80021b0 <HAL_GPIO_Init+0x2f0>)
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	492d      	ldr	r1, [pc, #180]	; (80021b0 <HAL_GPIO_Init+0x2f0>)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60cb      	str	r3, [r1, #12]
 8002100:	e006      	b.n	8002110 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002102:	4b2b      	ldr	r3, [pc, #172]	; (80021b0 <HAL_GPIO_Init+0x2f0>)
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	43db      	mvns	r3, r3
 800210a:	4929      	ldr	r1, [pc, #164]	; (80021b0 <HAL_GPIO_Init+0x2f0>)
 800210c:	4013      	ands	r3, r2
 800210e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d006      	beq.n	800212a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800211c:	4b24      	ldr	r3, [pc, #144]	; (80021b0 <HAL_GPIO_Init+0x2f0>)
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	4923      	ldr	r1, [pc, #140]	; (80021b0 <HAL_GPIO_Init+0x2f0>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]
 8002128:	e006      	b.n	8002138 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800212a:	4b21      	ldr	r3, [pc, #132]	; (80021b0 <HAL_GPIO_Init+0x2f0>)
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	43db      	mvns	r3, r3
 8002132:	491f      	ldr	r1, [pc, #124]	; (80021b0 <HAL_GPIO_Init+0x2f0>)
 8002134:	4013      	ands	r3, r2
 8002136:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d006      	beq.n	8002152 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002144:	4b1a      	ldr	r3, [pc, #104]	; (80021b0 <HAL_GPIO_Init+0x2f0>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4919      	ldr	r1, [pc, #100]	; (80021b0 <HAL_GPIO_Init+0x2f0>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	600b      	str	r3, [r1, #0]
 8002150:	e006      	b.n	8002160 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002152:	4b17      	ldr	r3, [pc, #92]	; (80021b0 <HAL_GPIO_Init+0x2f0>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	43db      	mvns	r3, r3
 800215a:	4915      	ldr	r1, [pc, #84]	; (80021b0 <HAL_GPIO_Init+0x2f0>)
 800215c:	4013      	ands	r3, r2
 800215e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	3301      	adds	r3, #1
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	fa22 f303 	lsr.w	r3, r2, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	f47f aeaf 	bne.w	8001ed4 <HAL_GPIO_Init+0x14>
  }
}
 8002176:	bf00      	nop
 8002178:	bf00      	nop
 800217a:	372c      	adds	r7, #44	; 0x2c
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	10320000 	.word	0x10320000
 8002188:	10310000 	.word	0x10310000
 800218c:	10220000 	.word	0x10220000
 8002190:	10210000 	.word	0x10210000
 8002194:	10120000 	.word	0x10120000
 8002198:	10110000 	.word	0x10110000
 800219c:	40021000 	.word	0x40021000
 80021a0:	40010000 	.word	0x40010000
 80021a4:	40010800 	.word	0x40010800
 80021a8:	40010c00 	.word	0x40010c00
 80021ac:	40011000 	.word	0x40011000
 80021b0:	40010400 	.word	0x40010400

080021b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	887b      	ldrh	r3, [r7, #2]
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d002      	beq.n	80021d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021cc:	2301      	movs	r3, #1
 80021ce:	73fb      	strb	r3, [r7, #15]
 80021d0:	e001      	b.n	80021d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021d2:	2300      	movs	r3, #0
 80021d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr

080021e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	460b      	mov	r3, r1
 80021ec:	807b      	strh	r3, [r7, #2]
 80021ee:	4613      	mov	r3, r2
 80021f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021f2:	787b      	ldrb	r3, [r7, #1]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021f8:	887a      	ldrh	r2, [r7, #2]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021fe:	e003      	b.n	8002208 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002200:	887b      	ldrh	r3, [r7, #2]
 8002202:	041a      	lsls	r2, r3, #16
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	611a      	str	r2, [r3, #16]
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr

08002212 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002212:	b480      	push	{r7}
 8002214:	b085      	sub	sp, #20
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	460b      	mov	r3, r1
 800221c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002224:	887a      	ldrh	r2, [r7, #2]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4013      	ands	r3, r2
 800222a:	041a      	lsls	r2, r3, #16
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	43d9      	mvns	r1, r3
 8002230:	887b      	ldrh	r3, [r7, #2]
 8002232:	400b      	ands	r3, r1
 8002234:	431a      	orrs	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	611a      	str	r2, [r3, #16]
}
 800223a:	bf00      	nop
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr

08002244 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e26c      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 8087 	beq.w	8002372 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002264:	4b92      	ldr	r3, [pc, #584]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 030c 	and.w	r3, r3, #12
 800226c:	2b04      	cmp	r3, #4
 800226e:	d00c      	beq.n	800228a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002270:	4b8f      	ldr	r3, [pc, #572]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 030c 	and.w	r3, r3, #12
 8002278:	2b08      	cmp	r3, #8
 800227a:	d112      	bne.n	80022a2 <HAL_RCC_OscConfig+0x5e>
 800227c:	4b8c      	ldr	r3, [pc, #560]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002288:	d10b      	bne.n	80022a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228a:	4b89      	ldr	r3, [pc, #548]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d06c      	beq.n	8002370 <HAL_RCC_OscConfig+0x12c>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d168      	bne.n	8002370 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e246      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022aa:	d106      	bne.n	80022ba <HAL_RCC_OscConfig+0x76>
 80022ac:	4b80      	ldr	r3, [pc, #512]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a7f      	ldr	r2, [pc, #508]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80022b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	e02e      	b.n	8002318 <HAL_RCC_OscConfig+0xd4>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10c      	bne.n	80022dc <HAL_RCC_OscConfig+0x98>
 80022c2:	4b7b      	ldr	r3, [pc, #492]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a7a      	ldr	r2, [pc, #488]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80022c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	4b78      	ldr	r3, [pc, #480]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a77      	ldr	r2, [pc, #476]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	e01d      	b.n	8002318 <HAL_RCC_OscConfig+0xd4>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022e4:	d10c      	bne.n	8002300 <HAL_RCC_OscConfig+0xbc>
 80022e6:	4b72      	ldr	r3, [pc, #456]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a71      	ldr	r2, [pc, #452]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	4b6f      	ldr	r3, [pc, #444]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a6e      	ldr	r2, [pc, #440]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	e00b      	b.n	8002318 <HAL_RCC_OscConfig+0xd4>
 8002300:	4b6b      	ldr	r3, [pc, #428]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a6a      	ldr	r2, [pc, #424]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 8002306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	4b68      	ldr	r3, [pc, #416]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a67      	ldr	r2, [pc, #412]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 8002312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002316:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d013      	beq.n	8002348 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7ff fcb6 	bl	8001c90 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002328:	f7ff fcb2 	bl	8001c90 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b64      	cmp	r3, #100	; 0x64
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e1fa      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233a:	4b5d      	ldr	r3, [pc, #372]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0xe4>
 8002346:	e014      	b.n	8002372 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7ff fca2 	bl	8001c90 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002350:	f7ff fc9e 	bl	8001c90 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	; 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e1e6      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002362:	4b53      	ldr	r3, [pc, #332]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x10c>
 800236e:	e000      	b.n	8002372 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d063      	beq.n	8002446 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800237e:	4b4c      	ldr	r3, [pc, #304]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 030c 	and.w	r3, r3, #12
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00b      	beq.n	80023a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800238a:	4b49      	ldr	r3, [pc, #292]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	2b08      	cmp	r3, #8
 8002394:	d11c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x18c>
 8002396:	4b46      	ldr	r3, [pc, #280]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d116      	bne.n	80023d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a2:	4b43      	ldr	r3, [pc, #268]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <HAL_RCC_OscConfig+0x176>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d001      	beq.n	80023ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e1ba      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ba:	4b3d      	ldr	r3, [pc, #244]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4939      	ldr	r1, [pc, #228]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ce:	e03a      	b.n	8002446 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d020      	beq.n	800241a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023d8:	4b36      	ldr	r3, [pc, #216]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 80023da:	2201      	movs	r2, #1
 80023dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023de:	f7ff fc57 	bl	8001c90 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e6:	f7ff fc53 	bl	8001c90 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e19b      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f8:	4b2d      	ldr	r3, [pc, #180]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0f0      	beq.n	80023e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002404:	4b2a      	ldr	r3, [pc, #168]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	4927      	ldr	r1, [pc, #156]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 8002414:	4313      	orrs	r3, r2
 8002416:	600b      	str	r3, [r1, #0]
 8002418:	e015      	b.n	8002446 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800241a:	4b26      	ldr	r3, [pc, #152]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7ff fc36 	bl	8001c90 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002428:	f7ff fc32 	bl	8001c90 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e17a      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800243a:	4b1d      	ldr	r3, [pc, #116]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d03a      	beq.n	80024c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d019      	beq.n	800248e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800245a:	4b17      	ldr	r3, [pc, #92]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 800245c:	2201      	movs	r2, #1
 800245e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002460:	f7ff fc16 	bl	8001c90 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002468:	f7ff fc12 	bl	8001c90 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e15a      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800247a:	4b0d      	ldr	r3, [pc, #52]	; (80024b0 <HAL_RCC_OscConfig+0x26c>)
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f0      	beq.n	8002468 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002486:	2001      	movs	r0, #1
 8002488:	f000 fa9a 	bl	80029c0 <RCC_Delay>
 800248c:	e01c      	b.n	80024c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800248e:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002494:	f7ff fbfc 	bl	8001c90 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800249a:	e00f      	b.n	80024bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800249c:	f7ff fbf8 	bl	8001c90 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d908      	bls.n	80024bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e140      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>
 80024ae:	bf00      	nop
 80024b0:	40021000 	.word	0x40021000
 80024b4:	42420000 	.word	0x42420000
 80024b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024bc:	4b9e      	ldr	r3, [pc, #632]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1e9      	bne.n	800249c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 80a6 	beq.w	8002622 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024d6:	2300      	movs	r3, #0
 80024d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024da:	4b97      	ldr	r3, [pc, #604]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10d      	bne.n	8002502 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e6:	4b94      	ldr	r3, [pc, #592]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	4a93      	ldr	r2, [pc, #588]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 80024ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f0:	61d3      	str	r3, [r2, #28]
 80024f2:	4b91      	ldr	r3, [pc, #580]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024fe:	2301      	movs	r3, #1
 8002500:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002502:	4b8e      	ldr	r3, [pc, #568]	; (800273c <HAL_RCC_OscConfig+0x4f8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250a:	2b00      	cmp	r3, #0
 800250c:	d118      	bne.n	8002540 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800250e:	4b8b      	ldr	r3, [pc, #556]	; (800273c <HAL_RCC_OscConfig+0x4f8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a8a      	ldr	r2, [pc, #552]	; (800273c <HAL_RCC_OscConfig+0x4f8>)
 8002514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002518:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800251a:	f7ff fbb9 	bl	8001c90 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002522:	f7ff fbb5 	bl	8001c90 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b64      	cmp	r3, #100	; 0x64
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e0fd      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002534:	4b81      	ldr	r3, [pc, #516]	; (800273c <HAL_RCC_OscConfig+0x4f8>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0f0      	beq.n	8002522 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d106      	bne.n	8002556 <HAL_RCC_OscConfig+0x312>
 8002548:	4b7b      	ldr	r3, [pc, #492]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	4a7a      	ldr	r2, [pc, #488]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	6213      	str	r3, [r2, #32]
 8002554:	e02d      	b.n	80025b2 <HAL_RCC_OscConfig+0x36e>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10c      	bne.n	8002578 <HAL_RCC_OscConfig+0x334>
 800255e:	4b76      	ldr	r3, [pc, #472]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	4a75      	ldr	r2, [pc, #468]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 8002564:	f023 0301 	bic.w	r3, r3, #1
 8002568:	6213      	str	r3, [r2, #32]
 800256a:	4b73      	ldr	r3, [pc, #460]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	4a72      	ldr	r2, [pc, #456]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 8002570:	f023 0304 	bic.w	r3, r3, #4
 8002574:	6213      	str	r3, [r2, #32]
 8002576:	e01c      	b.n	80025b2 <HAL_RCC_OscConfig+0x36e>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	2b05      	cmp	r3, #5
 800257e:	d10c      	bne.n	800259a <HAL_RCC_OscConfig+0x356>
 8002580:	4b6d      	ldr	r3, [pc, #436]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	4a6c      	ldr	r2, [pc, #432]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 8002586:	f043 0304 	orr.w	r3, r3, #4
 800258a:	6213      	str	r3, [r2, #32]
 800258c:	4b6a      	ldr	r3, [pc, #424]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	4a69      	ldr	r2, [pc, #420]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	6213      	str	r3, [r2, #32]
 8002598:	e00b      	b.n	80025b2 <HAL_RCC_OscConfig+0x36e>
 800259a:	4b67      	ldr	r3, [pc, #412]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	4a66      	ldr	r2, [pc, #408]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 80025a0:	f023 0301 	bic.w	r3, r3, #1
 80025a4:	6213      	str	r3, [r2, #32]
 80025a6:	4b64      	ldr	r3, [pc, #400]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	4a63      	ldr	r2, [pc, #396]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 80025ac:	f023 0304 	bic.w	r3, r3, #4
 80025b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d015      	beq.n	80025e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ba:	f7ff fb69 	bl	8001c90 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c0:	e00a      	b.n	80025d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c2:	f7ff fb65 	bl	8001c90 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e0ab      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d8:	4b57      	ldr	r3, [pc, #348]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0ee      	beq.n	80025c2 <HAL_RCC_OscConfig+0x37e>
 80025e4:	e014      	b.n	8002610 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e6:	f7ff fb53 	bl	8001c90 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ec:	e00a      	b.n	8002604 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ee:	f7ff fb4f 	bl	8001c90 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e095      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002604:	4b4c      	ldr	r3, [pc, #304]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1ee      	bne.n	80025ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002610:	7dfb      	ldrb	r3, [r7, #23]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d105      	bne.n	8002622 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002616:	4b48      	ldr	r3, [pc, #288]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	4a47      	ldr	r2, [pc, #284]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 800261c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002620:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 8081 	beq.w	800272e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800262c:	4b42      	ldr	r3, [pc, #264]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 030c 	and.w	r3, r3, #12
 8002634:	2b08      	cmp	r3, #8
 8002636:	d061      	beq.n	80026fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	2b02      	cmp	r3, #2
 800263e:	d146      	bne.n	80026ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002640:	4b3f      	ldr	r3, [pc, #252]	; (8002740 <HAL_RCC_OscConfig+0x4fc>)
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002646:	f7ff fb23 	bl	8001c90 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800264e:	f7ff fb1f 	bl	8001c90 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e067      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002660:	4b35      	ldr	r3, [pc, #212]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1f0      	bne.n	800264e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002674:	d108      	bne.n	8002688 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002676:	4b30      	ldr	r3, [pc, #192]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	492d      	ldr	r1, [pc, #180]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002688:	4b2b      	ldr	r3, [pc, #172]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a19      	ldr	r1, [r3, #32]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	430b      	orrs	r3, r1
 800269a:	4927      	ldr	r1, [pc, #156]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 800269c:	4313      	orrs	r3, r2
 800269e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026a0:	4b27      	ldr	r3, [pc, #156]	; (8002740 <HAL_RCC_OscConfig+0x4fc>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a6:	f7ff faf3 	bl	8001c90 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ae:	f7ff faef 	bl	8001c90 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e037      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026c0:	4b1d      	ldr	r3, [pc, #116]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x46a>
 80026cc:	e02f      	b.n	800272e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ce:	4b1c      	ldr	r3, [pc, #112]	; (8002740 <HAL_RCC_OscConfig+0x4fc>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d4:	f7ff fadc 	bl	8001c90 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026dc:	f7ff fad8 	bl	8001c90 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e020      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ee:	4b12      	ldr	r3, [pc, #72]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x498>
 80026fa:	e018      	b.n	800272e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d101      	bne.n	8002708 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e013      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <HAL_RCC_OscConfig+0x4f4>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	429a      	cmp	r2, r3
 800271a:	d106      	bne.n	800272a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002726:	429a      	cmp	r2, r3
 8002728:	d001      	beq.n	800272e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40021000 	.word	0x40021000
 800273c:	40007000 	.word	0x40007000
 8002740:	42420060 	.word	0x42420060

08002744 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e0d0      	b.n	80028fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002758:	4b6a      	ldr	r3, [pc, #424]	; (8002904 <HAL_RCC_ClockConfig+0x1c0>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d910      	bls.n	8002788 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002766:	4b67      	ldr	r3, [pc, #412]	; (8002904 <HAL_RCC_ClockConfig+0x1c0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f023 0207 	bic.w	r2, r3, #7
 800276e:	4965      	ldr	r1, [pc, #404]	; (8002904 <HAL_RCC_ClockConfig+0x1c0>)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	4313      	orrs	r3, r2
 8002774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002776:	4b63      	ldr	r3, [pc, #396]	; (8002904 <HAL_RCC_ClockConfig+0x1c0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	429a      	cmp	r2, r3
 8002782:	d001      	beq.n	8002788 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e0b8      	b.n	80028fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d020      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027a0:	4b59      	ldr	r3, [pc, #356]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	4a58      	ldr	r2, [pc, #352]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80027a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027b8:	4b53      	ldr	r3, [pc, #332]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	4a52      	ldr	r2, [pc, #328]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80027be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c4:	4b50      	ldr	r3, [pc, #320]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	494d      	ldr	r1, [pc, #308]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d040      	beq.n	8002864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d107      	bne.n	80027fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ea:	4b47      	ldr	r3, [pc, #284]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d115      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e07f      	b.n	80028fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d107      	bne.n	8002812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002802:	4b41      	ldr	r3, [pc, #260]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d109      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e073      	b.n	80028fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002812:	4b3d      	ldr	r3, [pc, #244]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e06b      	b.n	80028fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002822:	4b39      	ldr	r3, [pc, #228]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f023 0203 	bic.w	r2, r3, #3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	4936      	ldr	r1, [pc, #216]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	4313      	orrs	r3, r2
 8002832:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002834:	f7ff fa2c 	bl	8001c90 <HAL_GetTick>
 8002838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283a:	e00a      	b.n	8002852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800283c:	f7ff fa28 	bl	8001c90 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f241 3288 	movw	r2, #5000	; 0x1388
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e053      	b.n	80028fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002852:	4b2d      	ldr	r3, [pc, #180]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f003 020c 	and.w	r2, r3, #12
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	429a      	cmp	r2, r3
 8002862:	d1eb      	bne.n	800283c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002864:	4b27      	ldr	r3, [pc, #156]	; (8002904 <HAL_RCC_ClockConfig+0x1c0>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d210      	bcs.n	8002894 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002872:	4b24      	ldr	r3, [pc, #144]	; (8002904 <HAL_RCC_ClockConfig+0x1c0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f023 0207 	bic.w	r2, r3, #7
 800287a:	4922      	ldr	r1, [pc, #136]	; (8002904 <HAL_RCC_ClockConfig+0x1c0>)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	4313      	orrs	r3, r2
 8002880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002882:	4b20      	ldr	r3, [pc, #128]	; (8002904 <HAL_RCC_ClockConfig+0x1c0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	d001      	beq.n	8002894 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e032      	b.n	80028fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d008      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028a0:	4b19      	ldr	r3, [pc, #100]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4916      	ldr	r1, [pc, #88]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d009      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028be:	4b12      	ldr	r3, [pc, #72]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	490e      	ldr	r1, [pc, #56]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028d2:	f000 f821 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 80028d6:	4602      	mov	r2, r0
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	091b      	lsrs	r3, r3, #4
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	490a      	ldr	r1, [pc, #40]	; (800290c <HAL_RCC_ClockConfig+0x1c8>)
 80028e4:	5ccb      	ldrb	r3, [r1, r3]
 80028e6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ea:	4a09      	ldr	r2, [pc, #36]	; (8002910 <HAL_RCC_ClockConfig+0x1cc>)
 80028ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028ee:	4b09      	ldr	r3, [pc, #36]	; (8002914 <HAL_RCC_ClockConfig+0x1d0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff f98a 	bl	8001c0c <HAL_InitTick>

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40022000 	.word	0x40022000
 8002908:	40021000 	.word	0x40021000
 800290c:	08003224 	.word	0x08003224
 8002910:	20000060 	.word	0x20000060
 8002914:	20000064 	.word	0x20000064

08002918 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	2300      	movs	r3, #0
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	2300      	movs	r3, #0
 800292c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002932:	4b1e      	ldr	r3, [pc, #120]	; (80029ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f003 030c 	and.w	r3, r3, #12
 800293e:	2b04      	cmp	r3, #4
 8002940:	d002      	beq.n	8002948 <HAL_RCC_GetSysClockFreq+0x30>
 8002942:	2b08      	cmp	r3, #8
 8002944:	d003      	beq.n	800294e <HAL_RCC_GetSysClockFreq+0x36>
 8002946:	e027      	b.n	8002998 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002948:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800294a:	613b      	str	r3, [r7, #16]
      break;
 800294c:	e027      	b.n	800299e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	0c9b      	lsrs	r3, r3, #18
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	4a17      	ldr	r2, [pc, #92]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002958:	5cd3      	ldrb	r3, [r2, r3]
 800295a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d010      	beq.n	8002988 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002966:	4b11      	ldr	r3, [pc, #68]	; (80029ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	0c5b      	lsrs	r3, r3, #17
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	4a11      	ldr	r2, [pc, #68]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002972:	5cd3      	ldrb	r3, [r2, r3]
 8002974:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a0d      	ldr	r2, [pc, #52]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800297a:	fb02 f203 	mul.w	r2, r2, r3
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	fbb2 f3f3 	udiv	r3, r2, r3
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	e004      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a0c      	ldr	r2, [pc, #48]	; (80029bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800298c:	fb02 f303 	mul.w	r3, r2, r3
 8002990:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	613b      	str	r3, [r7, #16]
      break;
 8002996:	e002      	b.n	800299e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800299a:	613b      	str	r3, [r7, #16]
      break;
 800299c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800299e:	693b      	ldr	r3, [r7, #16]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	371c      	adds	r7, #28
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40021000 	.word	0x40021000
 80029b0:	007a1200 	.word	0x007a1200
 80029b4:	08003234 	.word	0x08003234
 80029b8:	08003244 	.word	0x08003244
 80029bc:	003d0900 	.word	0x003d0900

080029c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029c8:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <RCC_Delay+0x34>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a0a      	ldr	r2, [pc, #40]	; (80029f8 <RCC_Delay+0x38>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	0a5b      	lsrs	r3, r3, #9
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	fb02 f303 	mul.w	r3, r2, r3
 80029da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029dc:	bf00      	nop
  }
  while (Delay --);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	1e5a      	subs	r2, r3, #1
 80029e2:	60fa      	str	r2, [r7, #12]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1f9      	bne.n	80029dc <RCC_Delay+0x1c>
}
 80029e8:	bf00      	nop
 80029ea:	bf00      	nop
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr
 80029f4:	20000060 	.word	0x20000060
 80029f8:	10624dd3 	.word	0x10624dd3

080029fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e041      	b.n	8002a92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d106      	bne.n	8002a28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7fe ff5a 	bl	80018dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3304      	adds	r3, #4
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	f000 fa56 	bl	8002eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
	...

08002a9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d001      	beq.n	8002ab4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e035      	b.n	8002b20 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0201 	orr.w	r2, r2, #1
 8002aca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a16      	ldr	r2, [pc, #88]	; (8002b2c <HAL_TIM_Base_Start_IT+0x90>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d009      	beq.n	8002aea <HAL_TIM_Base_Start_IT+0x4e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ade:	d004      	beq.n	8002aea <HAL_TIM_Base_Start_IT+0x4e>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a12      	ldr	r2, [pc, #72]	; (8002b30 <HAL_TIM_Base_Start_IT+0x94>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d111      	bne.n	8002b0e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2b06      	cmp	r3, #6
 8002afa:	d010      	beq.n	8002b1e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0201 	orr.w	r2, r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b0c:	e007      	b.n	8002b1e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f042 0201 	orr.w	r2, r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40012c00 	.word	0x40012c00
 8002b30:	40000400 	.word	0x40000400

08002b34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d020      	beq.n	8002b98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d01b      	beq.n	8002b98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0202 	mvn.w	r2, #2
 8002b68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f998 	bl	8002eb4 <HAL_TIM_IC_CaptureCallback>
 8002b84:	e005      	b.n	8002b92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f98b 	bl	8002ea2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f99a 	bl	8002ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d020      	beq.n	8002be4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d01b      	beq.n	8002be4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f06f 0204 	mvn.w	r2, #4
 8002bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2202      	movs	r2, #2
 8002bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f972 	bl	8002eb4 <HAL_TIM_IC_CaptureCallback>
 8002bd0:	e005      	b.n	8002bde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f965 	bl	8002ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f974 	bl	8002ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d020      	beq.n	8002c30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f003 0308 	and.w	r3, r3, #8
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d01b      	beq.n	8002c30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f06f 0208 	mvn.w	r2, #8
 8002c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2204      	movs	r2, #4
 8002c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f94c 	bl	8002eb4 <HAL_TIM_IC_CaptureCallback>
 8002c1c:	e005      	b.n	8002c2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f93f 	bl	8002ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f94e 	bl	8002ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f003 0310 	and.w	r3, r3, #16
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d020      	beq.n	8002c7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f003 0310 	and.w	r3, r3, #16
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d01b      	beq.n	8002c7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f06f 0210 	mvn.w	r2, #16
 8002c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2208      	movs	r2, #8
 8002c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f926 	bl	8002eb4 <HAL_TIM_IC_CaptureCallback>
 8002c68:	e005      	b.n	8002c76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f919 	bl	8002ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f928 	bl	8002ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00c      	beq.n	8002ca0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d007      	beq.n	8002ca0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f06f 0201 	mvn.w	r2, #1
 8002c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fe fc70 	bl	8001580 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00c      	beq.n	8002cc4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d007      	beq.n	8002cc4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 fa6f 	bl	80031a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00c      	beq.n	8002ce8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d007      	beq.n	8002ce8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f8f8 	bl	8002ed8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	f003 0320 	and.w	r3, r3, #32
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00c      	beq.n	8002d0c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f003 0320 	and.w	r3, r3, #32
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d007      	beq.n	8002d0c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f06f 0220 	mvn.w	r2, #32
 8002d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 fa42 	bl	8003190 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d101      	bne.n	8002d30 <HAL_TIM_ConfigClockSource+0x1c>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	e0b4      	b.n	8002e9a <HAL_TIM_ConfigClockSource+0x186>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d68:	d03e      	beq.n	8002de8 <HAL_TIM_ConfigClockSource+0xd4>
 8002d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d6e:	f200 8087 	bhi.w	8002e80 <HAL_TIM_ConfigClockSource+0x16c>
 8002d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d76:	f000 8086 	beq.w	8002e86 <HAL_TIM_ConfigClockSource+0x172>
 8002d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d7e:	d87f      	bhi.n	8002e80 <HAL_TIM_ConfigClockSource+0x16c>
 8002d80:	2b70      	cmp	r3, #112	; 0x70
 8002d82:	d01a      	beq.n	8002dba <HAL_TIM_ConfigClockSource+0xa6>
 8002d84:	2b70      	cmp	r3, #112	; 0x70
 8002d86:	d87b      	bhi.n	8002e80 <HAL_TIM_ConfigClockSource+0x16c>
 8002d88:	2b60      	cmp	r3, #96	; 0x60
 8002d8a:	d050      	beq.n	8002e2e <HAL_TIM_ConfigClockSource+0x11a>
 8002d8c:	2b60      	cmp	r3, #96	; 0x60
 8002d8e:	d877      	bhi.n	8002e80 <HAL_TIM_ConfigClockSource+0x16c>
 8002d90:	2b50      	cmp	r3, #80	; 0x50
 8002d92:	d03c      	beq.n	8002e0e <HAL_TIM_ConfigClockSource+0xfa>
 8002d94:	2b50      	cmp	r3, #80	; 0x50
 8002d96:	d873      	bhi.n	8002e80 <HAL_TIM_ConfigClockSource+0x16c>
 8002d98:	2b40      	cmp	r3, #64	; 0x40
 8002d9a:	d058      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0x13a>
 8002d9c:	2b40      	cmp	r3, #64	; 0x40
 8002d9e:	d86f      	bhi.n	8002e80 <HAL_TIM_ConfigClockSource+0x16c>
 8002da0:	2b30      	cmp	r3, #48	; 0x30
 8002da2:	d064      	beq.n	8002e6e <HAL_TIM_ConfigClockSource+0x15a>
 8002da4:	2b30      	cmp	r3, #48	; 0x30
 8002da6:	d86b      	bhi.n	8002e80 <HAL_TIM_ConfigClockSource+0x16c>
 8002da8:	2b20      	cmp	r3, #32
 8002daa:	d060      	beq.n	8002e6e <HAL_TIM_ConfigClockSource+0x15a>
 8002dac:	2b20      	cmp	r3, #32
 8002dae:	d867      	bhi.n	8002e80 <HAL_TIM_ConfigClockSource+0x16c>
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d05c      	beq.n	8002e6e <HAL_TIM_ConfigClockSource+0x15a>
 8002db4:	2b10      	cmp	r3, #16
 8002db6:	d05a      	beq.n	8002e6e <HAL_TIM_ConfigClockSource+0x15a>
 8002db8:	e062      	b.n	8002e80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6818      	ldr	r0, [r3, #0]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	6899      	ldr	r1, [r3, #8]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f000 f96a 	bl	80030a2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ddc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	609a      	str	r2, [r3, #8]
      break;
 8002de6:	e04f      	b.n	8002e88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6818      	ldr	r0, [r3, #0]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	6899      	ldr	r1, [r3, #8]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f000 f953 	bl	80030a2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e0a:	609a      	str	r2, [r3, #8]
      break;
 8002e0c:	e03c      	b.n	8002e88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	6859      	ldr	r1, [r3, #4]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	f000 f8ca 	bl	8002fb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2150      	movs	r1, #80	; 0x50
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 f921 	bl	800306e <TIM_ITRx_SetConfig>
      break;
 8002e2c:	e02c      	b.n	8002e88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	6859      	ldr	r1, [r3, #4]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	f000 f8e8 	bl	8003010 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2160      	movs	r1, #96	; 0x60
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 f911 	bl	800306e <TIM_ITRx_SetConfig>
      break;
 8002e4c:	e01c      	b.n	8002e88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	6859      	ldr	r1, [r3, #4]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	f000 f8aa 	bl	8002fb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2140      	movs	r1, #64	; 0x40
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 f901 	bl	800306e <TIM_ITRx_SetConfig>
      break;
 8002e6c:	e00c      	b.n	8002e88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4619      	mov	r1, r3
 8002e78:	4610      	mov	r0, r2
 8002e7a:	f000 f8f8 	bl	800306e <TIM_ITRx_SetConfig>
      break;
 8002e7e:	e003      	b.n	8002e88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	73fb      	strb	r3, [r7, #15]
      break;
 8002e84:	e000      	b.n	8002e88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc80      	pop	{r7}
 8002ee8:	4770      	bx	lr
	...

08002eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a2b      	ldr	r2, [pc, #172]	; (8002fac <TIM_Base_SetConfig+0xc0>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d007      	beq.n	8002f14 <TIM_Base_SetConfig+0x28>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f0a:	d003      	beq.n	8002f14 <TIM_Base_SetConfig+0x28>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a28      	ldr	r2, [pc, #160]	; (8002fb0 <TIM_Base_SetConfig+0xc4>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d108      	bne.n	8002f26 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a20      	ldr	r2, [pc, #128]	; (8002fac <TIM_Base_SetConfig+0xc0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d007      	beq.n	8002f3e <TIM_Base_SetConfig+0x52>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f34:	d003      	beq.n	8002f3e <TIM_Base_SetConfig+0x52>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a1d      	ldr	r2, [pc, #116]	; (8002fb0 <TIM_Base_SetConfig+0xc4>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d108      	bne.n	8002f50 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a0d      	ldr	r2, [pc, #52]	; (8002fac <TIM_Base_SetConfig+0xc0>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d103      	bne.n	8002f84 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	691a      	ldr	r2, [r3, #16]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d005      	beq.n	8002fa2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f023 0201 	bic.w	r2, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	611a      	str	r2, [r3, #16]
  }
}
 8002fa2:	bf00      	nop
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr
 8002fac:	40012c00 	.word	0x40012c00
 8002fb0:	40000400 	.word	0x40000400

08002fb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	f023 0201 	bic.w	r2, r3, #1
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f023 030a 	bic.w	r3, r3, #10
 8002ff0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	621a      	str	r2, [r3, #32]
}
 8003006:	bf00      	nop
 8003008:	371c      	adds	r7, #28
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003010:	b480      	push	{r7}
 8003012:	b087      	sub	sp, #28
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	f023 0210 	bic.w	r2, r3, #16
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800303a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	031b      	lsls	r3, r3, #12
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800304c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	4313      	orrs	r3, r2
 8003056:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	621a      	str	r2, [r3, #32]
}
 8003064:	bf00      	nop
 8003066:	371c      	adds	r7, #28
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr

0800306e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800306e:	b480      	push	{r7}
 8003070:	b085      	sub	sp, #20
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
 8003076:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003084:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4313      	orrs	r3, r2
 800308c:	f043 0307 	orr.w	r3, r3, #7
 8003090:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	609a      	str	r2, [r3, #8]
}
 8003098:	bf00      	nop
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr

080030a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b087      	sub	sp, #28
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
 80030ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	021a      	lsls	r2, r3, #8
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	431a      	orrs	r2, r3
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	609a      	str	r2, [r3, #8]
}
 80030d6:	bf00      	nop
 80030d8:	371c      	adds	r7, #28
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr

080030e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d101      	bne.n	80030f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030f4:	2302      	movs	r3, #2
 80030f6:	e041      	b.n	800317c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4313      	orrs	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a14      	ldr	r2, [pc, #80]	; (8003188 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d009      	beq.n	8003150 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003144:	d004      	beq.n	8003150 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a10      	ldr	r2, [pc, #64]	; (800318c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d10c      	bne.n	800316a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003156:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	4313      	orrs	r3, r2
 8003160:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	40012c00 	.word	0x40012c00
 800318c:	40000400 	.word	0x40000400

08003190 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr

080031a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr

080031b4 <__libc_init_array>:
 80031b4:	b570      	push	{r4, r5, r6, lr}
 80031b6:	2600      	movs	r6, #0
 80031b8:	4d0c      	ldr	r5, [pc, #48]	; (80031ec <__libc_init_array+0x38>)
 80031ba:	4c0d      	ldr	r4, [pc, #52]	; (80031f0 <__libc_init_array+0x3c>)
 80031bc:	1b64      	subs	r4, r4, r5
 80031be:	10a4      	asrs	r4, r4, #2
 80031c0:	42a6      	cmp	r6, r4
 80031c2:	d109      	bne.n	80031d8 <__libc_init_array+0x24>
 80031c4:	f000 f822 	bl	800320c <_init>
 80031c8:	2600      	movs	r6, #0
 80031ca:	4d0a      	ldr	r5, [pc, #40]	; (80031f4 <__libc_init_array+0x40>)
 80031cc:	4c0a      	ldr	r4, [pc, #40]	; (80031f8 <__libc_init_array+0x44>)
 80031ce:	1b64      	subs	r4, r4, r5
 80031d0:	10a4      	asrs	r4, r4, #2
 80031d2:	42a6      	cmp	r6, r4
 80031d4:	d105      	bne.n	80031e2 <__libc_init_array+0x2e>
 80031d6:	bd70      	pop	{r4, r5, r6, pc}
 80031d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80031dc:	4798      	blx	r3
 80031de:	3601      	adds	r6, #1
 80031e0:	e7ee      	b.n	80031c0 <__libc_init_array+0xc>
 80031e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80031e6:	4798      	blx	r3
 80031e8:	3601      	adds	r6, #1
 80031ea:	e7f2      	b.n	80031d2 <__libc_init_array+0x1e>
 80031ec:	08003248 	.word	0x08003248
 80031f0:	08003248 	.word	0x08003248
 80031f4:	08003248 	.word	0x08003248
 80031f8:	0800324c 	.word	0x0800324c

080031fc <memset>:
 80031fc:	4603      	mov	r3, r0
 80031fe:	4402      	add	r2, r0
 8003200:	4293      	cmp	r3, r2
 8003202:	d100      	bne.n	8003206 <memset+0xa>
 8003204:	4770      	bx	lr
 8003206:	f803 1b01 	strb.w	r1, [r3], #1
 800320a:	e7f9      	b.n	8003200 <memset+0x4>

0800320c <_init>:
 800320c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320e:	bf00      	nop
 8003210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003212:	bc08      	pop	{r3}
 8003214:	469e      	mov	lr, r3
 8003216:	4770      	bx	lr

08003218 <_fini>:
 8003218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321a:	bf00      	nop
 800321c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800321e:	bc08      	pop	{r3}
 8003220:	469e      	mov	lr, r3
 8003222:	4770      	bx	lr
